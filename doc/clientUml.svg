<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="2614px" preserveAspectRatio="none" style="width:5630px;height:2614px;" version="1.1" viewBox="0 0 5630 2614" width="5630px" zoomAndPan="magnify"><defs><filter height="300%" id="fnx2l7w2pop82" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--cluster Graphic--><polygon fill="#FFFFFF" filter="url(#fnx2l7w2pop82)" points="14,1003.5,81,1003.5,88,1025.7969,2561,1025.7969,2561,2602,14,2602,14,1003.5" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="14" x2="88" y1="1025.7969" y2="1025.7969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="61" x="18" y="1018.4951">Graphic</text><!--cluster BinaryProtocol--><polygon fill="#FFFFFF" filter="url(#fnx2l7w2pop82)" points="4274,1080.5,4395,1080.5,4402,1102.7969,5012,1102.7969,5012,1265.5,4274,1265.5,4274,1080.5" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="4274" x2="4402" y1="1102.7969" y2="1102.7969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="115" x="4278" y="1095.4951">BinaryProtocol</text><!--class Graphic.Alien--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="86.4141" id="Graphic.Alien" style="stroke: #A80036; stroke-width: 1.5;" width="483" x="682.5" y="1139.5"/><ellipse cx="904.75" cy="1155.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M907.7188,1161.1406 Q907.1406,1161.4375 906.5,1161.5781 Q905.8594,1161.7344 905.1563,1161.7344 Q902.6563,1161.7344 901.3281,1160.0938 Q900.0156,1158.4375 900.0156,1155.3125 Q900.0156,1152.1875 901.3281,1150.5313 Q902.6563,1148.875 905.1563,1148.875 Q905.8594,1148.875 906.5,1149.0313 Q907.1563,1149.1875 907.7188,1149.4844 L907.7188,1152.2031 Q907.0938,1151.625 906.5,1151.3594 Q905.9063,1151.0781 905.2813,1151.0781 Q903.9375,1151.0781 903.25,1152.1563 Q902.5625,1153.2188 902.5625,1155.3125 Q902.5625,1157.4063 903.25,1158.4844 Q903.9375,1159.5469 905.2813,1159.5469 Q905.9063,1159.5469 906.5,1159.2813 Q907.0938,1159 907.7188,1158.4219 L907.7188,1161.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="30" x="925.25" y="1159.6543">Alien</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="683.5" x2="1164.5" y1="1171.5" y2="1171.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="683.5" x2="1164.5" y1="1179.5" y2="1179.5"/><ellipse cx="693.5" cy="1191.4023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="457" x="702.5" y="1193.7104">Alien(int id, bool bonus, const sf::Vector2f&amp; test, const animationState&amp; anime)</text><ellipse cx="693.5" cy="1204.207" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="44" x="702.5" y="1206.5151">~Alien()</text><ellipse cx="693.5" cy="1217.0117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="702.5" y="1219.3198">getType() : entityType {query}</text><!--class Graphic.AlienShoot--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="86.4141" id="Graphic.AlienShoot" style="stroke: #A80036; stroke-width: 1.5;" width="516" x="1201" y="1139.5"/><ellipse cx="1421.25" cy="1155.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1424.2188,1161.1406 Q1423.6406,1161.4375 1423,1161.5781 Q1422.3594,1161.7344 1421.6563,1161.7344 Q1419.1563,1161.7344 1417.8281,1160.0938 Q1416.5156,1158.4375 1416.5156,1155.3125 Q1416.5156,1152.1875 1417.8281,1150.5313 Q1419.1563,1148.875 1421.6563,1148.875 Q1422.3594,1148.875 1423,1149.0313 Q1423.6563,1149.1875 1424.2188,1149.4844 L1424.2188,1152.2031 Q1423.5938,1151.625 1423,1151.3594 Q1422.4063,1151.0781 1421.7813,1151.0781 Q1420.4375,1151.0781 1419.75,1152.1563 Q1419.0625,1153.2188 1419.0625,1155.3125 Q1419.0625,1157.4063 1419.75,1158.4844 Q1420.4375,1159.5469 1421.7813,1159.5469 Q1422.4063,1159.5469 1423,1159.2813 Q1423.5938,1159 1424.2188,1158.4219 L1424.2188,1161.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="67" x="1441.75" y="1159.6543">AlienShoot</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1202" x2="1716" y1="1171.5" y2="1171.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1202" x2="1716" y1="1179.5" y2="1179.5"/><ellipse cx="1212" cy="1191.4023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="490" x="1221" y="1193.7104">AlienShoot(int id, bool bonus, const sf::Vector2f&amp; test, const animationState&amp; anime)</text><ellipse cx="1212" cy="1204.207" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="1221" y="1206.5151">~AlienShoot()</text><ellipse cx="1212" cy="1217.0117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="1221" y="1219.3198">getType() : entityType {query}</text><!--class Graphic.Background--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="86.4141" id="Graphic.Background" style="stroke: #A80036; stroke-width: 1.5;" width="523" x="1752.5" y="1139.5"/><ellipse cx="1972.25" cy="1155.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1975.2188,1161.1406 Q1974.6406,1161.4375 1974,1161.5781 Q1973.3594,1161.7344 1972.6563,1161.7344 Q1970.1563,1161.7344 1968.8281,1160.0938 Q1967.5156,1158.4375 1967.5156,1155.3125 Q1967.5156,1152.1875 1968.8281,1150.5313 Q1970.1563,1148.875 1972.6563,1148.875 Q1973.3594,1148.875 1974,1149.0313 Q1974.6563,1149.1875 1975.2188,1149.4844 L1975.2188,1152.2031 Q1974.5938,1151.625 1974,1151.3594 Q1973.4063,1151.0781 1972.7813,1151.0781 Q1971.4375,1151.0781 1970.75,1152.1563 Q1970.0625,1153.2188 1970.0625,1155.3125 Q1970.0625,1157.4063 1970.75,1158.4844 Q1971.4375,1159.5469 1972.7813,1159.5469 Q1973.4063,1159.5469 1974,1159.2813 Q1974.5938,1159 1975.2188,1158.4219 L1975.2188,1161.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="75" x="1992.75" y="1159.6543">Background</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1753.5" x2="2274.5" y1="1171.5" y2="1171.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1753.5" x2="2274.5" y1="1179.5" y2="1179.5"/><ellipse cx="1763.5" cy="1191.4023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="497" x="1772.5" y="1193.7104">Background(int id, bool bonus, const sf::Vector2f&amp; test, const animationState&amp; anime)</text><ellipse cx="1763.5" cy="1204.207" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="1772.5" y="1206.5151">~Background()</text><ellipse cx="1763.5" cy="1217.0117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="1772.5" y="1219.3198">getType() : entityType {query}</text><!--class Graphic.Entity--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="304.0938" id="Graphic.Entity" style="stroke: #A80036; stroke-width: 1.5;" width="625" x="22.5" y="1030.5"/><ellipse cx="313.25" cy="1046.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M316.2188,1052.1406 Q315.6406,1052.4375 315,1052.5781 Q314.3594,1052.7344 313.6563,1052.7344 Q311.1563,1052.7344 309.8281,1051.0938 Q308.5156,1049.4375 308.5156,1046.3125 Q308.5156,1043.1875 309.8281,1041.5313 Q311.1563,1039.875 313.6563,1039.875 Q314.3594,1039.875 315,1040.0313 Q315.6563,1040.1875 316.2188,1040.4844 L316.2188,1043.2031 Q315.5938,1042.625 315,1042.3594 Q314.4063,1042.0781 313.7813,1042.0781 Q312.4375,1042.0781 311.75,1043.1563 Q311.0625,1044.2188 311.0625,1046.3125 Q311.0625,1048.4063 311.75,1049.4844 Q312.4375,1050.5469 313.7813,1050.5469 Q314.4063,1050.5469 315,1050.2813 Q315.5938,1050 316.2188,1049.4219 L316.2188,1052.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="35" x="333.75" y="1050.6543">Entity</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="23.5" x2="646.5" y1="1062.5" y2="1062.5"/><polygon fill="none" points="33.5,1069.4023,37.5,1073.4023,33.5,1077.4023,29.5,1073.4023" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="42.5" y="1076.7104">_currentAnimation : animationState</text><polygon fill="none" points="33.5,1082.207,37.5,1086.207,33.5,1090.207,29.5,1086.207" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="42.5" y="1089.5151">_bonus : bool</text><polygon fill="none" points="33.5,1095.0117,37.5,1099.0117,33.5,1103.0117,29.5,1099.0117" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="42.5" y="1102.3198">_type : entityType</text><polygon fill="none" points="33.5,1107.8164,37.5,1111.8164,33.5,1115.8164,29.5,1111.8164" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="42" x="42.5" y="1115.1245">_id : int</text><polygon fill="none" points="33.5,1120.6211,37.5,1124.6211,33.5,1128.6211,29.5,1124.6211" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="42.5" y="1127.9292">_pos : sf::Vector2f</text><polygon fill="none" points="33.5,1133.4258,37.5,1137.4258,33.5,1141.4258,29.5,1137.4258" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="42.5" y="1140.7339">_scale : sf::Vector2f</text><polygon fill="none" points="33.5,1146.2305,37.5,1150.2305,33.5,1154.2305,29.5,1150.2305" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="42.5" y="1153.5386">_animation : std::map&lt;animationState, sf::IntRect&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="23.5" x2="646.5" y1="1160.1328" y2="1160.1328"/><ellipse cx="33.5" cy="1172.0352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="599" x="42.5" y="1174.3433">Entity(int id, const entityType&amp; type, bool bonus, const sf::Vector2f&amp; pos, const animationState&amp; anime)</text><ellipse cx="33.5" cy="1184.8398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="42.5" y="1187.1479">Entity(const Entity&amp; other)</text><ellipse cx="33.5" cy="1197.6445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="48" x="42.5" y="1199.9526">~Entity()</text><ellipse cx="33.5" cy="1210.4492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="42.5" y="1212.7573">operator=(const Entity&amp; other) : Entity&amp;</text><ellipse cx="33.5" cy="1223.2539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="273" x="42.5" y="1225.562">getCurrentAnimation() : animationState {query}</text><ellipse cx="33.5" cy="1236.0586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="42.5" y="1238.3667">getType() : entityType {query}</text><ellipse cx="33.5" cy="1248.8633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="42.5" y="1251.1714">getId() : int {query}</text><ellipse cx="33.5" cy="1261.668" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="42.5" y="1263.9761">getRectAnime(const animationState &amp;) : sf::IntRect</text><ellipse cx="33.5" cy="1274.4727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="175" x="42.5" y="1276.7808">getPos() : sf::Vector2f {query}</text><ellipse cx="33.5" cy="1287.2773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="42.5" y="1289.5854">setAnimation(const animationState&amp; anime) : void</text><ellipse cx="33.5" cy="1300.082" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="42.5" y="1302.3901">setscale(const sf::Vector2f&amp; scale) : void</text><ellipse cx="33.5" cy="1312.8867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="42.5" y="1315.1948">update(const sf::Vector2f&amp; pos) : void</text><ellipse cx="33.5" cy="1325.6914" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="42.5" y="1327.9995">update(int x, int y) : void</text><!--class Graphic.IEntity--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="99.2188" id="Graphic.IEntity" style="stroke: #A80036; stroke-width: 1.5;" width="242" x="2311" y="1133"/><ellipse cx="2407.75" cy="1149" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2407.8594,1144.3438 L2406.7031,1149.4219 L2409.0313,1149.4219 L2407.8594,1144.3438 Z M2406.375,1142.1094 L2409.3594,1142.1094 L2412.7188,1154.5 L2410.2656,1154.5 L2409.5,1151.4375 L2406.2188,1151.4375 L2405.4688,1154.5 L2403.0313,1154.5 L2406.375,1142.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="40" x="2428.25" y="1153.1543">IEntity</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2312" x2="2552" y1="1165" y2="1165"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2312" x2="2552" y1="1173" y2="1173"/><ellipse cx="2322" cy="1184.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="51" x="2331" y="1187.2104">~IEntity()</text><ellipse cx="2322" cy="1197.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="177" x="2331" y="1200.0151">getType() : entityType {query}</text><ellipse cx="2322" cy="1210.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="216" x="2331" y="1212.8198">update(const sf::Vector2f&amp; pos) : void</text><ellipse cx="2322" cy="1223.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="141" x="2331" y="1225.6245">update(int x, int y) : void</text><!--class Graphic.IGraphicLibrary--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="137.6328" id="Graphic.IGraphicLibrary" style="stroke: #A80036; stroke-width: 1.5;" width="514" x="352" y="1740"/><ellipse cx="557.25" cy="1756" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M557.3594,1751.3438 L556.2031,1756.4219 L558.5313,1756.4219 L557.3594,1751.3438 Z M555.875,1749.1094 L558.8594,1749.1094 L562.2188,1761.5 L559.7656,1761.5 L559,1758.4375 L555.7188,1758.4375 L554.9688,1761.5 L552.5313,1761.5 L555.875,1749.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="95" x="577.75" y="1760.1543">IGraphicLibrary</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="353" x2="865" y1="1772" y2="1772"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="353" x2="865" y1="1780" y2="1780"/><ellipse cx="363" cy="1791.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="372" y="1794.2104">~IGraphicLibrary()</text><ellipse cx="363" cy="1804.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="488" x="372" y="1807.0151">eventHandler(const std::vector&lt;std::shared_ptr&lt;Graphic::Entity&gt;&gt;&amp; entityArray) : int</text><ellipse cx="363" cy="1817.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="164" x="372" y="1819.8198">getPlayerName() : std::string</text><ellipse cx="363" cy="1830.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="128" x="372" y="1832.6245">displayWindow() : void</text><ellipse cx="363" cy="1843.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="420" x="372" y="1845.4292">drawGame(const std::vector&lt;std::shared_ptr&lt;Graphic::Entity&gt;&gt; &amp;) : void</text><ellipse cx="363" cy="1855.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="203" x="372" y="1858.2339">init(const sf::Vector2f&amp; scale) : void</text><ellipse cx="363" cy="1868.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="68" x="372" y="1871.0386">stop() : void</text><!--class Graphic.Obstacle--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="86.4141" id="Graphic.Obstacle" style="stroke: #A80036; stroke-width: 1.5;" width="506" x="901" y="1766"/><ellipse cx="1122.25" cy="1782" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1125.2188,1787.6406 Q1124.6406,1787.9375 1124,1788.0781 Q1123.3594,1788.2344 1122.6563,1788.2344 Q1120.1563,1788.2344 1118.8281,1786.5938 Q1117.5156,1784.9375 1117.5156,1781.8125 Q1117.5156,1778.6875 1118.8281,1777.0313 Q1120.1563,1775.375 1122.6563,1775.375 Q1123.3594,1775.375 1124,1775.5313 Q1124.6563,1775.6875 1125.2188,1775.9844 L1125.2188,1778.7031 Q1124.5938,1778.125 1124,1777.8594 Q1123.4063,1777.5781 1122.7813,1777.5781 Q1121.4375,1777.5781 1120.75,1778.6563 Q1120.0625,1779.7188 1120.0625,1781.8125 Q1120.0625,1783.9063 1120.75,1784.9844 Q1121.4375,1786.0469 1122.7813,1786.0469 Q1123.4063,1786.0469 1124,1785.7813 Q1124.5938,1785.5 1125.2188,1784.9219 L1125.2188,1787.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="55" x="1142.75" y="1786.1543">Obstacle</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="902" x2="1406" y1="1798" y2="1798"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="902" x2="1406" y1="1806" y2="1806"/><ellipse cx="912" cy="1817.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="480" x="921" y="1820.2104">Obstacle(int id, bool bonus, const sf::Vector2f&amp; test, const animationState&amp; anime)</text><ellipse cx="912" cy="1830.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="921" y="1833.0151">~Obstacle()</text><ellipse cx="912" cy="1843.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="921" y="1845.8198">getType() : entityType {query}</text><!--class Graphic.Pirate--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="86.4141" id="Graphic.Pirate" style="stroke: #A80036; stroke-width: 1.5;" width="489" x="1442.5" y="1766"/><ellipse cx="1664.25" cy="1782" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1667.2188,1787.6406 Q1666.6406,1787.9375 1666,1788.0781 Q1665.3594,1788.2344 1664.6563,1788.2344 Q1662.1563,1788.2344 1660.8281,1786.5938 Q1659.5156,1784.9375 1659.5156,1781.8125 Q1659.5156,1778.6875 1660.8281,1777.0313 Q1662.1563,1775.375 1664.6563,1775.375 Q1665.3594,1775.375 1666,1775.5313 Q1666.6563,1775.6875 1667.2188,1775.9844 L1667.2188,1778.7031 Q1666.5938,1778.125 1666,1777.8594 Q1665.4063,1777.5781 1664.7813,1777.5781 Q1663.4375,1777.5781 1662.75,1778.6563 Q1662.0625,1779.7188 1662.0625,1781.8125 Q1662.0625,1783.9063 1662.75,1784.9844 Q1663.4375,1786.0469 1664.7813,1786.0469 Q1665.4063,1786.0469 1666,1785.7813 Q1666.5938,1785.5 1667.2188,1784.9219 L1667.2188,1787.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="37" x="1684.75" y="1786.1543">Pirate</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1443.5" x2="1930.5" y1="1798" y2="1798"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1443.5" x2="1930.5" y1="1806" y2="1806"/><ellipse cx="1453.5" cy="1817.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="463" x="1462.5" y="1820.2104">Pirate(int id, bool bonus, const sf::Vector2f&amp; test, const animationState&amp; anime)</text><ellipse cx="1453.5" cy="1830.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="50" x="1462.5" y="1833.0151">~Pirate()</text><ellipse cx="1453.5" cy="1843.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="1462.5" y="1845.8198">getType() : entityType {query}</text><!--class Graphic.PirateShoot--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="86.4141" id="Graphic.PirateShoot" style="stroke: #A80036; stroke-width: 1.5;" width="522" x="1967" y="1766"/><ellipse cx="2186.75" cy="1782" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2189.7188,1787.6406 Q2189.1406,1787.9375 2188.5,1788.0781 Q2187.8594,1788.2344 2187.1563,1788.2344 Q2184.6563,1788.2344 2183.3281,1786.5938 Q2182.0156,1784.9375 2182.0156,1781.8125 Q2182.0156,1778.6875 2183.3281,1777.0313 Q2184.6563,1775.375 2187.1563,1775.375 Q2187.8594,1775.375 2188.5,1775.5313 Q2189.1563,1775.6875 2189.7188,1775.9844 L2189.7188,1778.7031 Q2189.0938,1778.125 2188.5,1777.8594 Q2187.9063,1777.5781 2187.2813,1777.5781 Q2185.9375,1777.5781 2185.25,1778.6563 Q2184.5625,1779.7188 2184.5625,1781.8125 Q2184.5625,1783.9063 2185.25,1784.9844 Q2185.9375,1786.0469 2187.2813,1786.0469 Q2187.9063,1786.0469 2188.5,1785.7813 Q2189.0938,1785.5 2189.7188,1784.9219 L2189.7188,1787.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="74" x="2207.25" y="1786.1543">PirateShoot</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1968" x2="2488" y1="1798" y2="1798"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1968" x2="2488" y1="1806" y2="1806"/><ellipse cx="1978" cy="1817.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="496" x="1987" y="1820.2104">PirateShoot(int id, bool bonus, const sf::Vector2f&amp; test, const animationState&amp; anime)</text><ellipse cx="1978" cy="1830.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="1987" y="1833.0151">~PirateShoot()</text><ellipse cx="1978" cy="1843.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="1987" y="1845.8198">getType() : entityType {query}</text><!--class Graphic.Player--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="86.4141" id="Graphic.Player" style="stroke: #A80036; stroke-width: 1.5;" width="630" x="230" y="2252"/><ellipse cx="521.75" cy="2268" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M524.7188,2273.6406 Q524.1406,2273.9375 523.5,2274.0781 Q522.8594,2274.2344 522.1563,2274.2344 Q519.6563,2274.2344 518.3281,2272.5938 Q517.0156,2270.9375 517.0156,2267.8125 Q517.0156,2264.6875 518.3281,2263.0313 Q519.6563,2261.375 522.1563,2261.375 Q522.8594,2261.375 523.5,2261.5313 Q524.1563,2261.6875 524.7188,2261.9844 L524.7188,2264.7031 Q524.0938,2264.125 523.5,2263.8594 Q522.9063,2263.5781 522.2813,2263.5781 Q520.9375,2263.5781 520.25,2264.6563 Q519.5625,2265.7188 519.5625,2267.8125 Q519.5625,2269.9063 520.25,2270.9844 Q520.9375,2272.0469 522.2813,2272.0469 Q522.9063,2272.0469 523.5,2271.7813 Q524.0938,2271.5 524.7188,2270.9219 L524.7188,2273.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="38" x="542.25" y="2272.1543">Player</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="231" x2="859" y1="2284" y2="2284"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="231" x2="859" y1="2292" y2="2292"/><ellipse cx="241" cy="2303.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="604" x="250" y="2306.2104">Player(int id, const entityType&amp; type, bool bonus, const sf::Vector2f&amp; test, const animationState&amp; anime)</text><ellipse cx="241" cy="2316.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="52" x="250" y="2319.0151">~Player()</text><ellipse cx="241" cy="2329.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="250" y="2331.8198">getType() : entityType {query}</text><!--class Graphic.PlayerShoot--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="86.4141" id="Graphic.PlayerShoot" style="stroke: #A80036; stroke-width: 1.5;" width="524" x="895" y="2252"/><ellipse cx="1115.25" cy="2268" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1118.2188,2273.6406 Q1117.6406,2273.9375 1117,2274.0781 Q1116.3594,2274.2344 1115.6563,2274.2344 Q1113.1563,2274.2344 1111.8281,2272.5938 Q1110.5156,2270.9375 1110.5156,2267.8125 Q1110.5156,2264.6875 1111.8281,2263.0313 Q1113.1563,2261.375 1115.6563,2261.375 Q1116.3594,2261.375 1117,2261.5313 Q1117.6563,2261.6875 1118.2188,2261.9844 L1118.2188,2264.7031 Q1117.5938,2264.125 1117,2263.8594 Q1116.4063,2263.5781 1115.7813,2263.5781 Q1114.4375,2263.5781 1113.75,2264.6563 Q1113.0625,2265.7188 1113.0625,2267.8125 Q1113.0625,2269.9063 1113.75,2270.9844 Q1114.4375,2272.0469 1115.7813,2272.0469 Q1116.4063,2272.0469 1117,2271.7813 Q1117.5938,2271.5 1118.2188,2270.9219 L1118.2188,2273.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="75" x="1135.75" y="2272.1543">PlayerShoot</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="896" x2="1418" y1="2284" y2="2284"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="896" x2="1418" y1="2292" y2="2292"/><ellipse cx="906" cy="2303.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="498" x="915" y="2306.2104">PlayerShoot(int id, bool bonus, const sf::Vector2f&amp; test, const animationState&amp; anime)</text><ellipse cx="906" cy="2316.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="915" y="2319.0151">~PlayerShoot()</text><ellipse cx="906" cy="2329.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="915" y="2331.8198">getType() : entityType {query}</text><!--class Graphic.Spaceship--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="86.4141" id="Graphic.Spaceship" style="stroke: #A80036; stroke-width: 1.5;" width="515" x="1454.5" y="2252"/><ellipse cx="1675.25" cy="2268" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1678.2188,2273.6406 Q1677.6406,2273.9375 1677,2274.0781 Q1676.3594,2274.2344 1675.6563,2274.2344 Q1673.1563,2274.2344 1671.8281,2272.5938 Q1670.5156,2270.9375 1670.5156,2267.8125 Q1670.5156,2264.6875 1671.8281,2263.0313 Q1673.1563,2261.375 1675.6563,2261.375 Q1676.3594,2261.375 1677,2261.5313 Q1677.6563,2261.6875 1678.2188,2261.9844 L1678.2188,2264.7031 Q1677.5938,2264.125 1677,2263.8594 Q1676.4063,2263.5781 1675.7813,2263.5781 Q1674.4375,2263.5781 1673.75,2264.6563 Q1673.0625,2265.7188 1673.0625,2267.8125 Q1673.0625,2269.9063 1673.75,2270.9844 Q1674.4375,2272.0469 1675.7813,2272.0469 Q1676.4063,2272.0469 1677,2271.7813 Q1677.5938,2271.5 1678.2188,2270.9219 L1678.2188,2273.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="65" x="1695.75" y="2272.1543">Spaceship</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1455.5" x2="1968.5" y1="2284" y2="2284"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1455.5" x2="1968.5" y1="2292" y2="2292"/><ellipse cx="1465.5" cy="2303.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="489" x="1474.5" y="2306.2104">Spaceship(int id, bool bonus, const sf::Vector2f&amp; test, const animationState&amp; anime)</text><ellipse cx="1465.5" cy="2316.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="1474.5" y="2319.0151">~Spaceship()</text><ellipse cx="1465.5" cy="2329.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="1474.5" y="2331.8198">getType() : entityType {query}</text><!--class Graphic.SpaceshipShoot--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="86.4141" id="Graphic.SpaceshipShoot" style="stroke: #A80036; stroke-width: 1.5;" width="548" x="2005" y="2252"/><ellipse cx="2223.75" cy="2268" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2226.7188,2273.6406 Q2226.1406,2273.9375 2225.5,2274.0781 Q2224.8594,2274.2344 2224.1563,2274.2344 Q2221.6563,2274.2344 2220.3281,2272.5938 Q2219.0156,2270.9375 2219.0156,2267.8125 Q2219.0156,2264.6875 2220.3281,2263.0313 Q2221.6563,2261.375 2224.1563,2261.375 Q2224.8594,2261.375 2225.5,2261.5313 Q2226.1563,2261.6875 2226.7188,2261.9844 L2226.7188,2264.7031 Q2226.0938,2264.125 2225.5,2263.8594 Q2224.9063,2263.5781 2224.2813,2263.5781 Q2222.9375,2263.5781 2222.25,2264.6563 Q2221.5625,2265.7188 2221.5625,2267.8125 Q2221.5625,2269.9063 2222.25,2270.9844 Q2222.9375,2272.0469 2224.2813,2272.0469 Q2224.9063,2272.0469 2225.5,2271.7813 Q2226.0938,2271.5 2226.7188,2270.9219 L2226.7188,2273.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="102" x="2244.25" y="2272.1543">SpaceshipShoot</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2006" x2="2552" y1="2284" y2="2284"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2006" x2="2552" y1="2292" y2="2292"/><ellipse cx="2016" cy="2303.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="522" x="2025" y="2306.2104">SpaceshipShoot(int id, bool bonus, const sf::Vector2f&amp; test, const animationState&amp; anime)</text><ellipse cx="2016" cy="2316.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="2025" y="2319.0151">~SpaceshipShoot()</text><ellipse cx="2016" cy="2329.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="2025" y="2331.8198">getType() : entityType {query}</text><!--class Graphic.Ufo--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="86.4141" id="Graphic.Ufo" style="stroke: #A80036; stroke-width: 1.5;" width="475" x="307.5" y="2482"/><ellipse cx="530.25" cy="2498" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M533.2188,2503.6406 Q532.6406,2503.9375 532,2504.0781 Q531.3594,2504.2344 530.6563,2504.2344 Q528.1563,2504.2344 526.8281,2502.5938 Q525.5156,2500.9375 525.5156,2497.8125 Q525.5156,2494.6875 526.8281,2493.0313 Q528.1563,2491.375 530.6563,2491.375 Q531.3594,2491.375 532,2491.5313 Q532.6563,2491.6875 533.2188,2491.9844 L533.2188,2494.7031 Q532.5938,2494.125 532,2493.8594 Q531.4063,2493.5781 530.7813,2493.5781 Q529.4375,2493.5781 528.75,2494.6563 Q528.0625,2495.7188 528.0625,2497.8125 Q528.0625,2499.9063 528.75,2500.9844 Q529.4375,2502.0469 530.7813,2502.0469 Q531.4063,2502.0469 532,2501.7813 Q532.5938,2501.5 533.2188,2500.9219 L533.2188,2503.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="21" x="550.75" y="2502.1543">Ufo</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="308.5" x2="781.5" y1="2514" y2="2514"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="308.5" x2="781.5" y1="2522" y2="2522"/><ellipse cx="318.5" cy="2533.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="449" x="327.5" y="2536.2104">Ufo(int id, bool bonus, const sf::Vector2f&amp; test, const animationState&amp; anime)</text><ellipse cx="318.5" cy="2546.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="36" x="327.5" y="2549.0151">~Ufo()</text><ellipse cx="318.5" cy="2559.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="327.5" y="2561.8198">getType() : entityType {query}</text><!--class Graphic.UfoShoot--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="86.4141" id="Graphic.UfoShoot" style="stroke: #A80036; stroke-width: 1.5;" width="508" x="818" y="2482"/><ellipse cx="1038.75" cy="2498" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1041.7188,2503.6406 Q1041.1406,2503.9375 1040.5,2504.0781 Q1039.8594,2504.2344 1039.1563,2504.2344 Q1036.6563,2504.2344 1035.3281,2502.5938 Q1034.0156,2500.9375 1034.0156,2497.8125 Q1034.0156,2494.6875 1035.3281,2493.0313 Q1036.6563,2491.375 1039.1563,2491.375 Q1039.8594,2491.375 1040.5,2491.5313 Q1041.1563,2491.6875 1041.7188,2491.9844 L1041.7188,2494.7031 Q1041.0938,2494.125 1040.5,2493.8594 Q1039.9063,2493.5781 1039.2813,2493.5781 Q1037.9375,2493.5781 1037.25,2494.6563 Q1036.5625,2495.7188 1036.5625,2497.8125 Q1036.5625,2499.9063 1037.25,2500.9844 Q1037.9375,2502.0469 1039.2813,2502.0469 Q1039.9063,2502.0469 1040.5,2501.7813 Q1041.0938,2501.5 1041.7188,2500.9219 L1041.7188,2503.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="58" x="1059.25" y="2502.1543">UfoShoot</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="819" x2="1325" y1="2514" y2="2514"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="819" x2="1325" y1="2522" y2="2522"/><ellipse cx="829" cy="2533.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="482" x="838" y="2536.2104">UfoShoot(int id, bool bonus, const sf::Vector2f&amp; test, const animationState&amp; anime)</text><ellipse cx="829" cy="2546.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="838" y="2549.0151">~UfoShoot()</text><ellipse cx="829" cy="2559.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="838" y="2561.8198">getType() : entityType {query}</text><!--class Graphic.Wall--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="86.4141" id="Graphic.Wall" style="stroke: #A80036; stroke-width: 1.5;" width="478" x="1361" y="2482"/><ellipse cx="1583.25" cy="2498" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1586.2188,2503.6406 Q1585.6406,2503.9375 1585,2504.0781 Q1584.3594,2504.2344 1583.6563,2504.2344 Q1581.1563,2504.2344 1579.8281,2502.5938 Q1578.5156,2500.9375 1578.5156,2497.8125 Q1578.5156,2494.6875 1579.8281,2493.0313 Q1581.1563,2491.375 1583.6563,2491.375 Q1584.3594,2491.375 1585,2491.5313 Q1585.6563,2491.6875 1586.2188,2491.9844 L1586.2188,2494.7031 Q1585.5938,2494.125 1585,2493.8594 Q1584.4063,2493.5781 1583.7813,2493.5781 Q1582.4375,2493.5781 1581.75,2494.6563 Q1581.0625,2495.7188 1581.0625,2497.8125 Q1581.0625,2499.9063 1581.75,2500.9844 Q1582.4375,2502.0469 1583.7813,2502.0469 Q1584.4063,2502.0469 1585,2501.7813 Q1585.5938,2501.5 1586.2188,2500.9219 L1586.2188,2503.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="25" x="1603.75" y="2502.1543">Wall</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1362" x2="1838" y1="2514" y2="2514"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1362" x2="1838" y1="2522" y2="2522"/><ellipse cx="1372" cy="2533.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="452" x="1381" y="2536.2104">Wall(int id, bool bonus, const sf::Vector2f&amp; test, const animationState&amp; anime)</text><ellipse cx="1372" cy="2546.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="39" x="1381" y="2549.0151">~Wall()</text><ellipse cx="1372" cy="2559.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="1381" y="2561.8198">getType() : entityType {query}</text><!--class Graphic.Command--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="137.6328" id="Graphic.Command" style="stroke: #A80036; stroke-width: 1.5;" width="94" x="1874" y="2456"/><ellipse cx="1889" cy="2472" fill="#EB937F" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1893.1094,2478 L1885.3906,2478 L1885.3906,2465.6094 L1893.1094,2465.6094 L1893.1094,2467.7656 L1887.8438,2467.7656 L1887.8438,2470.4375 L1892.6094,2470.4375 L1892.6094,2472.5938 L1887.8438,2472.5938 L1887.8438,2475.8438 L1893.1094,2475.8438 L1893.1094,2478 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="62" x="1903" y="2476.1543">Command</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1875" x2="1967" y1="2488" y2="2488"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="34" x="1880" y="2502.2104">DOWN</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="24" x="1880" y="2515.0151">EXIT</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="26" x="1880" y="2527.8198">LEFT</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="52" x="1880" y="2540.6245">NOTHING</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="34" x="1880" y="2553.4292">RIGHT</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="41" x="1880" y="2566.2339">SHOOT</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="15" x="1880" y="2579.0386">UP</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1875" x2="1967" y1="2585.6328" y2="2585.6328"/><!--class BinaryProtocol.Codec--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="150.4375" id="BinaryProtocol.Codec" style="stroke: #A80036; stroke-width: 1.5;" width="383" x="4620.5" y="1107.5"/><ellipse cx="4788.25" cy="1123.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4791.2188,1129.1406 Q4790.6406,1129.4375 4790,1129.5781 Q4789.3594,1129.7344 4788.6563,1129.7344 Q4786.1563,1129.7344 4784.8281,1128.0938 Q4783.5156,1126.4375 4783.5156,1123.3125 Q4783.5156,1120.1875 4784.8281,1118.5313 Q4786.1563,1116.875 4788.6563,1116.875 Q4789.3594,1116.875 4790,1117.0313 Q4790.6563,1117.1875 4791.2188,1117.4844 L4791.2188,1120.2031 Q4790.5938,1119.625 4790,1119.3594 Q4789.4063,1119.0781 4788.7813,1119.0781 Q4787.4375,1119.0781 4786.75,1120.1563 Q4786.0625,1121.2188 4786.0625,1123.3125 Q4786.0625,1125.4063 4786.75,1126.4844 Q4787.4375,1127.5469 4788.7813,1127.5469 Q4789.4063,1127.5469 4790,1127.2813 Q4790.5938,1127 4791.2188,1126.4219 L4791.2188,1129.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="39" x="4808.75" y="1127.6543">Codec</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4621.5" x2="5002.5" y1="1139.5" y2="1139.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4621.5" x2="5002.5" y1="1147.5" y2="1147.5"/><ellipse cx="4631.5" cy="1159.4023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="43" x="4640.5" y="1161.7104">Codec()</text><ellipse cx="4631.5" cy="1172.207" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="4640.5" y="1174.5151">Codec(const Codec&amp; other)</text><ellipse cx="4631.5" cy="1185.0117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="52" x="4640.5" y="1187.3198">~Codec()</text><ellipse cx="4631.5" cy="1197.8164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="237" x="4640.5" y="1200.1245">operator=(const Codec&amp; other) : Codec&amp;</text><ellipse cx="4631.5" cy="1210.6211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="4640.5" y="1212.9292">createPacket(const std::string&amp; message) : Packet</text><ellipse cx="4631.5" cy="1223.4258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="357" x="4640.5" y="1225.7339">unserialize(const boost::array&lt;uint8_t, 1024&gt;&amp; input) : Packet</text><ellipse cx="4631.5" cy="1236.2305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="4640.5" y="1238.5386">check_packet(const Packet&amp; toCheck) : bool</text><ellipse cx="4631.5" cy="1249.0352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="4640.5" y="1251.3433">serialize(const Packet&amp; input) : std::vector&lt;uint8_t&gt;</text><!--class BinaryProtocol.Packet--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="86.4141" id="BinaryProtocol.Packet" style="stroke: #A80036; stroke-width: 1.5;" width="303" x="4282.5" y="1139.5"/><ellipse cx="4408.25" cy="1155.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4411.2188,1161.1406 Q4410.6406,1161.4375 4410,1161.5781 Q4409.3594,1161.7344 4408.6563,1161.7344 Q4406.1563,1161.7344 4404.8281,1160.0938 Q4403.5156,1158.4375 4403.5156,1155.3125 Q4403.5156,1152.1875 4404.8281,1150.5313 Q4406.1563,1148.875 4408.6563,1148.875 Q4409.3594,1148.875 4410,1149.0313 Q4410.6563,1149.1875 4411.2188,1149.4844 L4411.2188,1152.2031 Q4410.5938,1151.625 4410,1151.3594 Q4409.4063,1151.0781 4408.7813,1151.0781 Q4407.4375,1151.0781 4406.75,1152.1563 Q4406.0625,1153.2188 4406.0625,1155.3125 Q4406.0625,1157.4063 4406.75,1158.4844 Q4407.4375,1159.5469 4408.7813,1159.5469 Q4409.4063,1159.5469 4410,1159.2813 Q4410.5938,1159 4411.2188,1158.4219 L4411.2188,1161.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="43" x="4428.75" y="1159.6543">Packet</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4283.5" x2="4584.5" y1="1171.5" y2="1171.5"/><ellipse cx="4293.5" cy="1183.4023" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="4302.5" y="1185.7104">_message : std::string</text><ellipse cx="4293.5" cy="1196.207" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="4302.5" y="1198.5151">_magicNumber : uint32_t</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4283.5" x2="4584.5" y1="1205.1094" y2="1205.1094"/><ellipse cx="4293.5" cy="1217.0117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="4302.5" y="1219.3198">operator==(const Packet&amp; other) : bool {query}</text><!--class Animation--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="240.0703" id="Animation" style="stroke: #A80036; stroke-width: 1.5;" width="444" x="3668" y="8"/><ellipse cx="3854.75" cy="24" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3857.7188,29.6406 Q3857.1406,29.9375 3856.5,30.0781 Q3855.8594,30.2344 3855.1563,30.2344 Q3852.6563,30.2344 3851.3281,28.5938 Q3850.0156,26.9375 3850.0156,23.8125 Q3850.0156,20.6875 3851.3281,19.0313 Q3852.6563,17.375 3855.1563,17.375 Q3855.8594,17.375 3856.5,17.5313 Q3857.1563,17.6875 3857.7188,17.9844 L3857.7188,20.7031 Q3857.0938,20.125 3856.5,19.8594 Q3855.9063,19.5781 3855.2813,19.5781 Q3853.9375,19.5781 3853.25,20.6563 Q3852.5625,21.7188 3852.5625,23.8125 Q3852.5625,25.9063 3853.25,26.9844 Q3853.9375,28.0469 3855.2813,28.0469 Q3855.9063,28.0469 3856.5,27.7813 Q3857.0938,27.5 3857.7188,26.9219 L3857.7188,29.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="62" x="3875.25" y="28.1543">Animation</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3669" x2="4111" y1="40" y2="40"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3676" y="48.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="3688" y="54.2104">_currentState : StateAnim</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3676" y="61.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="3688" y="67.0151">_error : int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3676" y="74.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="3688" y="79.8198">_currentTime : sf::Time</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3676" y="87.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="3688" y="92.6245">_frameTime : sf::Time</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3676" y="100.1211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="418" x="3688" y="105.4292">_frames : std::map&lt;StateAnim, std::pair&lt;int, std::vector&lt;sf::IntRect&gt;&gt;&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3669" x2="4111" y1="112.0234" y2="112.0234"/><ellipse cx="3679" cy="123.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="3688" y="126.2339">Animation(const sf::Time&amp; frameTime)</text><ellipse cx="3679" cy="136.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="3688" y="139.0386">~Animation()</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3676" y="146.5352"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="3688" y="151.8433">getCurrentFrame(StateAnim &amp;) : int</text><ellipse cx="3679" cy="162.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="3688" y="164.6479">getState() : int {query}</text><ellipse cx="3679" cy="175.1445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="3688" y="177.4526">getFrame(StateAnim &amp;) : sf::IntRect</text><ellipse cx="3679" cy="187.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="322" x="3688" y="190.2573">update(sf::Time deltaTime, StateAnim state) : sf::IntRect</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3676" y="197.7539"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="308" x="3688" y="203.062">getFrames(StateAnim state) : std::vector&lt;sf::IntRect&gt;</text><ellipse cx="3679" cy="213.5586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="3688" y="215.8667">addFrame(StateAnim &amp;, const sf::IntRect &amp;) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3676" y="223.3633"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="3688" y="228.6714">setFramePos(int pos, StateAnim state) : void</text><ellipse cx="3679" cy="239.168" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="3688" y="241.4761">setState(StateAnim &amp;) : void</text><!--class Audio--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="137.6328" id="Audio" style="stroke: #A80036; stroke-width: 1.5;" width="413" x="3268.5" y="2226"/><ellipse cx="3453.25" cy="2242" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3456.2188,2247.6406 Q3455.6406,2247.9375 3455,2248.0781 Q3454.3594,2248.2344 3453.6563,2248.2344 Q3451.1563,2248.2344 3449.8281,2246.5938 Q3448.5156,2244.9375 3448.5156,2241.8125 Q3448.5156,2238.6875 3449.8281,2237.0313 Q3451.1563,2235.375 3453.6563,2235.375 Q3454.3594,2235.375 3455,2235.5313 Q3455.6563,2235.6875 3456.2188,2235.9844 L3456.2188,2238.7031 Q3455.5938,2238.125 3455,2237.8594 Q3454.4063,2237.5781 3453.7813,2237.5781 Q3452.4375,2237.5781 3451.75,2238.6563 Q3451.0625,2239.7188 3451.0625,2241.8125 Q3451.0625,2243.9063 3451.75,2244.9844 Q3452.4375,2246.0469 3453.7813,2246.0469 Q3454.4063,2246.0469 3455,2245.7813 Q3455.5938,2245.5 3456.2188,2244.9219 L3456.2188,2247.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="35" x="3473.75" y="2246.1543">Audio</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3269.5" x2="3680.5" y1="2258" y2="2258"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3276.5" y="2266.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="3288.5" y="2272.2104">_sounds : std::map&lt;audioType, sf::Sound&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3276.5" y="2279.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="363" x="3288.5" y="2285.0151">_soundBuffer : std::vector&lt;std::shared_ptr&lt;sf::SoundBuffer&gt;&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3269.5" x2="3680.5" y1="2291.6094" y2="2291.6094"/><ellipse cx="3279.5" cy="2303.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="39" x="3288.5" y="2305.8198">Audio()</text><ellipse cx="3279.5" cy="2316.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="48" x="3288.5" y="2318.6245">~Audio()</text><ellipse cx="3279.5" cy="2329.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="387" x="3288.5" y="2331.4292">addSound(const std::string&amp; path, bool loop, audioType type) : void</text><ellipse cx="3279.5" cy="2341.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="3288.5" y="2344.2339">playSound(audioType type) : void</text><ellipse cx="3279.5" cy="2354.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="3288.5" y="2357.0386">stopSound(audioType type) : void</text><!--class Client--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="572.9922" id="Client" style="stroke: #A80036; stroke-width: 1.5;" width="813" x="3018.5" y="308"/><ellipse cx="3403.25" cy="324" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3406.2188,329.6406 Q3405.6406,329.9375 3405,330.0781 Q3404.3594,330.2344 3403.6563,330.2344 Q3401.1563,330.2344 3399.8281,328.5938 Q3398.5156,326.9375 3398.5156,323.8125 Q3398.5156,320.6875 3399.8281,319.0313 Q3401.1563,317.375 3403.6563,317.375 Q3404.3594,317.375 3405,317.5313 Q3405.6563,317.6875 3406.2188,317.9844 L3406.2188,320.7031 Q3405.5938,320.125 3405,319.8594 Q3404.4063,319.5781 3403.7813,319.5781 Q3402.4375,319.5781 3401.75,320.6563 Q3401.0625,321.7188 3401.0625,323.8125 Q3401.0625,325.9063 3401.75,326.9844 Q3402.4375,328.0469 3403.7813,328.0469 Q3404.4063,328.0469 3405,327.7813 Q3405.5938,327.5 3406.2188,326.9219 L3406.2188,329.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="35" x="3423.75" y="328.1543">Client</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3019.5" x2="3830.5" y1="340" y2="340"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="348.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="3038.5" y="354.2104">_binCodec : BinaryProtocol::Codec</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="361.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="3038.5" y="367.0151">_state : ClientState</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="374.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="3038.5" y="379.8198">_sfmlModule : SFMLModule</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="387.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="3038.5" y="392.6245">_sigHandler : SignalHandler</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="400.1211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="3038.5" y="405.4292">_recvBuff : boost::array&lt;uint8_t, 1024&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="412.9258"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="3038.5" y="418.2339">_ioService : boost::asio::io_service</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="425.7305"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="276" x="3038.5" y="431.0386">_remoteEndpoint : boost::asio::ip::udp::endpoint</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="438.5352"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="3038.5" y="443.8433">_clientSocket : boost::asio::ip::udp::socket</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="451.3398"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="3038.5" y="456.6479">_thread : boost::thread</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="464.1445"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="274" x="3038.5" y="469.4526">_serverResponse : std::map&lt;int, hsmFunction&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="476.9492"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="3038.5" y="482.2573">_clientName : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="489.7539"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="328" x="3038.5" y="495.062">_entities : std::vector&lt;std::shared_ptr&lt;Graphic::Entity&gt;&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="502.5586"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="3038.5" y="507.8667">_players : std::vector&lt;std::shared_ptr&lt;Players&gt;&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3019.5" x2="3830.5" y1="514.4609" y2="514.4609"/><ellipse cx="3029.5" cy="526.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="448" x="3038.5" y="528.6714">Client(const std::string&amp; ip, unsigned short port, const std::string&amp; configFile)</text><ellipse cx="3029.5" cy="539.168" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="3038.5" y="541.4761">Client(const Client&amp; other)</text><ellipse cx="3029.5" cy="551.9727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="49" x="3038.5" y="554.2808">~Client()</text><ellipse cx="3029.5" cy="564.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="3038.5" y="567.0854">operator=(const Client&amp; other) : Client&amp;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="574.582"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="313" x="3038.5" y="579.8901">checkGameState(const Graphic::Command&amp; com) : int</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="587.3867"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="313" x="3038.5" y="592.6948">checkMenuState(const MenuDrawer::State&amp; state) : int</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="600.1914"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="3038.5" y="605.4995">changeState() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="612.9961"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="787" x="3038.5" y="618.3042">createEntity(int entityId, const entityType&amp; entityType, bool bonus, const sf::Vector2f&amp; entityPos, const animationState&amp; animation) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="625.8008"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="3038.5" y="631.1089">destroyEntity(int entityId) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="638.6055"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="3038.5" y="643.9136">handleBusy(std::string&amp; update) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="651.4102"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="3038.5" y="656.7183">handleFine(std::string&amp; update) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="664.2148"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="3038.5" y="669.5229">handleFullRoom(std::string&amp; update) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="677.0195"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="259" x="3038.5" y="682.3276">handleGhostRoom(std::string&amp; update) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="689.8242"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="3038.5" y="695.1323">handleInvalidCommand(std::string&amp; update) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="702.6289"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="3038.5" y="707.937">handleJoinLobby(std::string&amp; update) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="715.4336"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="391" x="3038.5" y="720.7417">handleReceive(const boost::system::error_code &amp;, std::size_t) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="728.2383"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="3038.5" y="733.5464">handleServerMessage(std::string&amp; update) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="741.043"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="3038.5" y="746.3511">handleStartGame(std::string&amp; update) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="753.8477"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="3038.5" y="759.1558">handleTooFast(std::string&amp; update) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="766.6523"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="3038.5" y="771.9604">handleUpdateGame(std::string&amp; update) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="779.457"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="263" x="3038.5" y="784.7651">handleUpdateMenu(std::string&amp; update) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="792.2617"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="3038.5" y="797.5698">loop() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="805.0664"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="3038.5" y="810.3745">send(const std::string&amp; str) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="817.8711"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="3038.5" y="823.1792">setState(const ClientState &amp;) : void</text><ellipse cx="3029.5" cy="833.6758" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="3038.5" y="835.9839">start() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="843.4805"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="3038.5" y="848.7886">startReceive() : void</text><ellipse cx="3029.5" cy="859.2852" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="3038.5" y="861.5933">stop() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3026.5" y="869.0898"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="540" x="3038.5" y="874.3979">updateEntity(int entityId, const sf::Vector2f&amp; entityPos, const animationState &amp;) : void {query}</text><!--class GifDrawer--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="201.6563" id="GifDrawer" style="stroke: #A80036; stroke-width: 1.5;" width="583" x="3716.5" y="2194"/><ellipse cx="3973.75" cy="2210" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3976.7188,2215.6406 Q3976.1406,2215.9375 3975.5,2216.0781 Q3974.8594,2216.2344 3974.1563,2216.2344 Q3971.6563,2216.2344 3970.3281,2214.5938 Q3969.0156,2212.9375 3969.0156,2209.8125 Q3969.0156,2206.6875 3970.3281,2205.0313 Q3971.6563,2203.375 3974.1563,2203.375 Q3974.8594,2203.375 3975.5,2203.5313 Q3976.1563,2203.6875 3976.7188,2203.9844 L3976.7188,2206.7031 Q3976.0938,2206.125 3975.5,2205.8594 Q3974.9063,2205.5781 3974.2813,2205.5781 Q3972.9375,2205.5781 3972.25,2206.6563 Q3971.5625,2207.7188 3971.5625,2209.8125 Q3971.5625,2211.9063 3972.25,2212.9844 Q3972.9375,2214.0469 3974.2813,2214.0469 Q3974.9063,2214.0469 3975.5,2213.7813 Q3976.0938,2213.5 3976.7188,2212.9219 L3976.7188,2215.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="60" x="3994.25" y="2214.1543">GifDrawer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3717.5" x2="4298.5" y1="2226" y2="2226"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3724.5" y="2234.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="62" x="3736.5" y="2240.2104">_index : int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3724.5" y="2247.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="3736.5" y="2253.0151">_currentTime : sf::Time</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3724.5" y="2260.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="3736.5" y="2265.8198">_frameTime : sf::Time</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3724.5" y="2273.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="3736.5" y="2278.6245">_scale : sf::Vector2f</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3724.5" y="2286.1211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="3736.5" y="2291.4292">_path : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3724.5" y="2298.9258"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="3736.5" y="2304.2339">_sprites : std::vector&lt;sf::Sprite&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3724.5" y="2311.7305"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="3736.5" y="2317.0386">_textures : std::vector&lt;std::shared_ptr&lt;sf::Texture&gt;&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3717.5" x2="4298.5" y1="2323.6328" y2="2323.6328"/><ellipse cx="3727.5" cy="2335.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="557" x="3736.5" y="2337.8433">GifDrawer(int nb, const std::string&amp; path, const sf::Vector2f&amp; scale, const sf::Time&amp; frameTime)</text><ellipse cx="3727.5" cy="2348.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="3736.5" y="2350.6479">~GifDrawer()</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3724.5" y="2358.1445"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="3736.5" y="2363.4526">loadSprite(const std::string&amp; path) : void</text><ellipse cx="3727.5" cy="2373.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="237" x="3736.5" y="2376.2573">setScale(const sf::Vector2f&amp; scale) : void</text><ellipse cx="3727.5" cy="2386.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="354" x="3736.5" y="2389.062">update(sf::Time deltaTime, sf::RenderWindow&amp; window) : void</text><!--class INetwork--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="124.8281" id="INetwork" style="stroke: #A80036; stroke-width: 1.5;" width="415" x="3217.5" y="65.5"/><ellipse cx="3392.75" cy="81.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3392.8594,76.8438 L3391.7031,81.9219 L3394.0313,81.9219 L3392.8594,76.8438 Z M3391.375,74.6094 L3394.3594,74.6094 L3397.7188,87 L3395.2656,87 L3394.5,83.9375 L3391.2188,83.9375 L3390.4688,87 L3388.0313,87 L3391.375,74.6094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="56" x="3413.25" y="85.6543">INetwork</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3218.5" x2="3631.5" y1="97.5" y2="97.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3218.5" x2="3631.5" y1="105.5" y2="105.5"/><ellipse cx="3228.5" cy="117.4023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="3237.5" y="119.7104">~INetwork()</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3225.5" y="127.207"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="389" x="3237.5" y="132.5151">handleReceive(const boost::system::error_code &amp;, std::size_t) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3225.5" y="140.0117"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="175" x="3237.5" y="145.3198">send(const std::string &amp;) : void</text><ellipse cx="3228.5" cy="155.8164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="70" x="3237.5" y="158.1245">start() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3225.5" y="165.6211"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="115" x="3237.5" y="170.9292">startReceive() : void</text><ellipse cx="3228.5" cy="181.4258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="68" x="3237.5" y="183.7339">stop() : void</text><!--class MenuDrawer--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="649.8203" id="MenuDrawer" style="stroke: #A80036; stroke-width: 1.5;" width="1340" x="3478" y="1484"/><ellipse cx="4104.75" cy="1500" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4107.7188,1505.6406 Q4107.1406,1505.9375 4106.5,1506.0781 Q4105.8594,1506.2344 4105.1563,1506.2344 Q4102.6563,1506.2344 4101.3281,1504.5938 Q4100.0156,1502.9375 4100.0156,1499.8125 Q4100.0156,1496.6875 4101.3281,1495.0313 Q4102.6563,1493.375 4105.1563,1493.375 Q4105.8594,1493.375 4106.5,1493.5313 Q4107.1563,1493.6875 4107.7188,1493.9844 L4107.7188,1496.7031 Q4107.0938,1496.125 4106.5,1495.8594 Q4105.9063,1495.5781 4105.2813,1495.5781 Q4103.9375,1495.5781 4103.25,1496.6563 Q4102.5625,1497.7188 4102.5625,1499.8125 Q4102.5625,1501.9063 4103.25,1502.9844 Q4103.9375,1504.0469 4105.2813,1504.0469 Q4105.9063,1504.0469 4106.5,1503.7813 Q4107.0938,1503.5 4107.7188,1502.9219 L4107.7188,1505.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="78" x="4125.25" y="1504.1543">MenuDrawer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3479" x2="4817" y1="1516" y2="1516"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1524.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="3498" y="1530.2104">_audio : Audio</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1537.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="3498" y="1543.0151">_gifDrawer : GifDrawer</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1550.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="3498" y="1555.8198">_parallaxShader : ParallaxShader</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1563.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="3498" y="1568.6245">_state : State</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1576.1211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="3498" y="1581.4292">_text : TextDrawer</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1588.9258"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="3498" y="1594.2339">_key : keyTraducer</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1601.7305"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="3498" y="1607.0386">_winpos : posVector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1614.5352"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="3498" y="1619.8433">_background : sf::Sprite</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1627.3398"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="3498" y="1632.6479">_back : sf::Texture</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1640.1445"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="3498" y="1645.4526">_scale : sf::Vector2f</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1652.9492"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="3498" y="1658.2573">_buttons : std::map&lt;State, sf::Sprite&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1665.7539"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="3498" y="1671.062">_posButtons : std::map&lt;State, sf::Vector2f&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1678.5586"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="3498" y="1683.8667">_players : std::map&lt;entityType, sf::Sprite&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1691.3633"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="3498" y="1696.6714">_roomName : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1704.168"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="3498" y="1709.4761">_textures : std::vector&lt;std::shared_ptr&lt;sf::Texture&gt;&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3479" x2="4817" y1="1716.0703" y2="1716.0703"/><ellipse cx="3489" cy="1727.9727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="3498" y="1730.2808">MenuDrawer(const sf::Vector2f&amp; scale)</text><ellipse cx="3489" cy="1740.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="3498" y="1743.0854">~MenuDrawer()</text><ellipse cx="3489" cy="1753.582" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="3498" y="1755.8901">getAudio() : Audio&amp;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1763.3867"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="3498" y="1768.6948">checkHome(State &amp;) : bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1776.1914"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="171" x="3498" y="1781.4995">checkRoom(State state) : bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1788.9961"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="3498" y="1794.3042">checkSettings(State state) : bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1801.8008"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="3498" y="1807.1089">checkView(State state) : bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1814.6055"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="355" x="3498" y="1819.9136">clickButton(sf::RenderWindow&amp; window, sf::Event&amp; event) : int</text><ellipse cx="3489" cy="1830.4102" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="3498" y="1832.7183">getState() : int {query}</text><ellipse cx="3489" cy="1843.2148" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="362" x="3498" y="1845.5229">handleMenu(sf::RenderWindow&amp; window, sf::Event&amp; event) : int</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1853.0195"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="672" x="3498" y="1858.3276">createRectangleShape(const sf::Vector2f&amp; size, const sf::Vector2f&amp; pos, const sf::Color&amp; color) : sf::RectangleShape</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1865.8242"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="3498" y="1871.1323">getPosButton(State obj) : sf::Vector2f</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1878.6289"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="475" x="3498" y="1883.937">enterScene(sf::RenderWindow&amp; window, sf::Event&amp; event, State state) : std::string</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1891.4336"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="3498" y="1896.7417">getPlayerName(const entityType&amp; type) : std::string</text><ellipse cx="3489" cy="1907.2383" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="3498" y="1909.5464">getRoomName() : std::string {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1917.043"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1314" x="3498" y="1922.3511">displayJoinScene(const sf::Vector2f&amp; posConditions, const sf::Vector2f&amp; posName, const sf::RectangleShape&amp; rect, const sf::Vector2f&amp; posEnter, const std::string&amp; port, sf::RenderWindow&amp; window, const sf::Sprite&amp; back) : void</text><ellipse cx="3489" cy="1932.8477" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1129" x="3498" y="1935.1558">draw(sf::RenderWindow&amp; window, const std::string&amp; playerName, sf::Event&amp; event, const std::vector&lt;std::shared_ptr&lt;Players&gt;&gt;&amp; players, const ClientState&amp; clientS, sf::Time&amp; frameTime) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1942.6523"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="480" x="3498" y="1947.9604">drawButton(State state, const sf::Vector2f&amp; pos, sf::RenderWindow&amp; window) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1955.457"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="445" x="3498" y="1960.7651">drawHome(sf::RenderWindow&amp; window, const std::string&amp; playerName) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1968.2617"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="444" x="3498" y="1973.5698">drawIconStat(State state, sf::RenderWindow&amp; window, sf::Vector2f pos) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1981.0664"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="535" x="3498" y="1986.3745">drawPlayerRoom(const std::shared_ptr&lt;Players&gt;&amp; player, sf::RenderWindow&amp; window) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="1993.8711"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="375" x="3498" y="1999.1792">drawRect(const sf::Vector2f &amp;, sf::RenderWindow&amp; window) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="2006.6758"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1161" x="3498" y="2011.9839">drawRoom(sf::RenderWindow&amp; window, const std::string&amp; playerName, sf::Event&amp; event, const std::vector&lt;std::shared_ptr&lt;Players&gt;&gt;&amp; players, const ClientState&amp; clientS, sf::Time&amp; frameTime) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="2019.4805"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="275" x="3498" y="2024.7886">drawSettings(sf::RenderWindow&amp; window) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="2032.2852"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="473" x="3498" y="2037.5933">drawState(State state, sf::RenderWindow&amp; window, const sf::Vector2f&amp; pos) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="2045.0898"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="3498" y="2050.3979">initPosButton() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="2057.8945"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="506" x="3498" y="2063.2026">loadSprite(const std::string&amp; path, State obj, sf:: IntRect, const posVector&amp; scale) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="2070.6992"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="602" x="3498" y="2076.0073">loadSpriteSize(const std::string&amp; path, const entityType&amp; obj, sf:: IntRect, const posVector&amp; scale) : void</text><ellipse cx="3489" cy="2086.5039" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="78" x="3498" y="2088.812">reSize() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3486" y="2096.3086"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="3498" y="2101.6167">setButton() : void</text><ellipse cx="3489" cy="2112.1133" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="3498" y="2114.4214">setScale(const sf::Vector2f &amp;) : void</text><ellipse cx="3489" cy="2124.918" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="3498" y="2127.2261">setState(State &amp;) : void</text><!--class ParallaxShader--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="176.0469" id="ParallaxShader" style="stroke: #A80036; stroke-width: 1.5;" width="381" x="4334.5" y="2207"/><ellipse cx="4473.75" cy="2223" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4476.7188,2228.6406 Q4476.1406,2228.9375 4475.5,2229.0781 Q4474.8594,2229.2344 4474.1563,2229.2344 Q4471.6563,2229.2344 4470.3281,2227.5938 Q4469.0156,2225.9375 4469.0156,2222.8125 Q4469.0156,2219.6875 4470.3281,2218.0313 Q4471.6563,2216.375 4474.1563,2216.375 Q4474.8594,2216.375 4475.5,2216.5313 Q4476.1563,2216.6875 4476.7188,2216.9844 L4476.7188,2219.7031 Q4476.0938,2219.125 4475.5,2218.8594 Q4474.9063,2218.5781 4474.2813,2218.5781 Q4472.9375,2218.5781 4472.25,2219.6563 Q4471.5625,2220.7188 4471.5625,2222.8125 Q4471.5625,2224.9063 4472.25,2225.9844 Q4472.9375,2227.0469 4474.2813,2227.0469 Q4474.9063,2227.0469 4475.5,2226.7813 Q4476.0938,2226.5 4476.7188,2225.9219 L4476.7188,2228.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="94" x="4494.25" y="2227.1543">ParallaxShader</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4335.5" x2="4714.5" y1="2239" y2="2239"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4342.5" y="2247.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="4354.5" y="2253.2104">_offset : float</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4342.5" y="2260.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="4354.5" y="2266.0151">_clock : sf::Clock</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4342.5" y="2273.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="4354.5" y="2278.8198">_parallaxShader : sf::Shader</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4342.5" y="2286.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="4354.5" y="2291.6245">_sprite : sf::Sprite</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4342.5" y="2299.1211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="4354.5" y="2304.4292">_texture : sf::Texture</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4342.5" y="2311.9258"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="4354.5" y="2317.2339">_scale : sf::Vector2f</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4335.5" x2="4714.5" y1="2323.8281" y2="2323.8281"/><ellipse cx="4345.5" cy="2335.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="355" x="4354.5" y="2338.0386">ParallaxShader(const std::string &amp;, const sf::Vector2f&amp; scale)</text><ellipse cx="4345.5" cy="2348.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="4354.5" y="2350.8433">~ParallaxShader()</text><ellipse cx="4345.5" cy="2361.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="315" x="4354.5" y="2363.6479">parallaxShaderDraw(sf::RenderWindow&amp; window) : void</text><ellipse cx="4345.5" cy="2374.1445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="4354.5" y="2376.4526">setScale(const sf::Vector2f &amp;) : void</text><!--class Parser--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="137.6328" id="Parser" style="stroke: #A80036; stroke-width: 1.5;" width="344" x="3028" y="1740"/><ellipse cx="3175.25" cy="1756" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3178.2188,1761.6406 Q3177.6406,1761.9375 3177,1762.0781 Q3176.3594,1762.2344 3175.6563,1762.2344 Q3173.1563,1762.2344 3171.8281,1760.5938 Q3170.5156,1758.9375 3170.5156,1755.8125 Q3170.5156,1752.6875 3171.8281,1751.0313 Q3173.1563,1749.375 3175.6563,1749.375 Q3176.3594,1749.375 3177,1749.5313 Q3177.6563,1749.6875 3178.2188,1749.9844 L3178.2188,1752.7031 Q3177.5938,1752.125 3177,1751.8594 Q3176.4063,1751.5781 3175.7813,1751.5781 Q3174.4375,1751.5781 3173.75,1752.6563 Q3173.0625,1753.7188 3173.0625,1755.8125 Q3173.0625,1757.9063 3173.75,1758.9844 Q3174.4375,1760.0469 3175.7813,1760.0469 Q3176.4063,1760.0469 3177,1759.7813 Q3177.5938,1759.5 3178.2188,1758.9219 L3178.2188,1761.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="41" x="3195.75" y="1760.1543">Parser</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3029" x2="3371" y1="1772" y2="1772"/><polygon fill="none" points="3039,1778.9023,3043,1782.9023,3039,1786.9023,3035,1782.9023" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="3048" y="1786.2104">_config : std::ifstream</text><polygon fill="none" points="3039,1791.707,3043,1795.707,3039,1799.707,3035,1795.707" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="3048" y="1799.0151">_paths : std::map&lt;entityType, std::string&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3029" x2="3371" y1="1805.6094" y2="1805.6094"/><ellipse cx="3039" cy="1817.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="3048" y="1819.8198">Parser(std::string configFilePath)</text><ellipse cx="3039" cy="1830.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="3048" y="1832.6245">~Parser()</text><ellipse cx="3039" cy="1843.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="3048" y="1845.4292">linkEntitiesToSprites() : bool</text><ellipse cx="3039" cy="1855.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="3048" y="1858.2339">openFile(std::string configFilePath) : bool</text><ellipse cx="3039" cy="1868.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="318" x="3048" y="1871.0386">getPaths() : std::map&lt;entityType , std::string&gt; {query}</text><!--class Players--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="137.6328" id="Players" style="stroke: #A80036; stroke-width: 1.5;" width="278" x="2588" y="1113.5"/><ellipse cx="2700.25" cy="1129.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2703.2188,1135.1406 Q2702.6406,1135.4375 2702,1135.5781 Q2701.3594,1135.7344 2700.6563,1135.7344 Q2698.1563,1135.7344 2696.8281,1134.0938 Q2695.5156,1132.4375 2695.5156,1129.3125 Q2695.5156,1126.1875 2696.8281,1124.5313 Q2698.1563,1122.875 2700.6563,1122.875 Q2701.3594,1122.875 2702,1123.0313 Q2702.6563,1123.1875 2703.2188,1123.4844 L2703.2188,1126.2031 Q2702.5938,1125.625 2702,1125.3594 Q2701.4063,1125.0781 2700.7813,1125.0781 Q2699.4375,1125.0781 2698.75,1126.1563 Q2698.0625,1127.2188 2698.0625,1129.3125 Q2698.0625,1131.4063 2698.75,1132.4844 Q2699.4375,1133.5469 2700.7813,1133.5469 Q2701.4063,1133.5469 2702,1133.2813 Q2702.5938,1133 2703.2188,1132.4219 L2703.2188,1135.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="45" x="2720.75" y="1133.6543">Players</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2589" x2="2865" y1="1145.5" y2="1145.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2596" y="1154.4023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="2608" y="1159.7104">_state : State</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2596" y="1167.207"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="2608" y="1172.5151">_type : entityType</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2589" x2="2865" y1="1179.1094" y2="1179.1094"/><ellipse cx="2599" cy="1191.0117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="2608" y="1193.3198">Players(const entityType&amp; type, State state)</text><ellipse cx="2599" cy="1203.8164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="59" x="2608" y="1206.1245">~Players()</text><ellipse cx="2599" cy="1216.6211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="2608" y="1218.9292">getType() : entityType {query}</text><ellipse cx="2599" cy="1229.4258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="2608" y="1231.7339">getState() : int {query}</text><ellipse cx="2599" cy="1242.2305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="2608" y="1244.5386">setState(State &amp;) : void</text><!--class SFMLModule--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="483.3594" id="SFMLModule" style="stroke: #A80036; stroke-width: 1.5;" width="1048" x="2901" y="941"/><ellipse cx="3382.75" cy="957" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3385.7188,962.6406 Q3385.1406,962.9375 3384.5,963.0781 Q3383.8594,963.2344 3383.1563,963.2344 Q3380.6563,963.2344 3379.3281,961.5938 Q3378.0156,959.9375 3378.0156,956.8125 Q3378.0156,953.6875 3379.3281,952.0313 Q3380.6563,950.375 3383.1563,950.375 Q3383.8594,950.375 3384.5,950.5313 Q3385.1563,950.6875 3385.7188,950.9844 L3385.7188,953.7031 Q3385.0938,953.125 3384.5,952.8594 Q3383.9063,952.5781 3383.2813,952.5781 Q3381.9375,952.5781 3381.25,953.6563 Q3380.5625,954.7188 3380.5625,956.8125 Q3380.5625,958.9063 3381.25,959.9844 Q3381.9375,961.0469 3383.2813,961.0469 Q3383.9063,961.0469 3384.5,960.7813 Q3385.0938,960.5 3385.7188,959.9219 L3385.7188,962.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="76" x="3403.25" y="961.1543">SFMLModule</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2902" x2="3948" y1="973" y2="973"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2909" y="981.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="2921" y="987.2104">_audio : Audio</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2909" y="994.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="2921" y="1000.0151">_menu : MenuDrawer</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2909" y="1007.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="2921" y="1012.8198">_parallaxShader : ParallaxShader</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2909" y="1020.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="2921" y="1025.6245">_parser : Parser</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2909" y="1033.1211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="2921" y="1038.4292">_scene : Scene</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2909" y="1045.9258"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="2921" y="1051.2339">_text : TextDrawer</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2909" y="1058.7305"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="2921" y="1064.0386">_key : keyTraducer</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2909" y="1071.5352"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="2921" y="1076.8433">_winpos : posVector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2909" y="1084.3398"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="2921" y="1089.6479">_event : sf::Event</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2909" y="1097.1445"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="2921" y="1102.4526">_window : sf::RenderWindow</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2909" y="1109.9492"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="2921" y="1115.2573">_background : sf::Sprite</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2909" y="1122.7539"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="2921" y="1128.062">_scale : sf::Vector2f</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2909" y="1135.5586"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="2921" y="1140.8667">_sprites : std::map&lt;entityType, sf::Sprite&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2909" y="1148.3633"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="2921" y="1153.6714">_roomName : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2909" y="1161.168"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="2921" y="1166.4761">_textures : std::vector&lt;std::shared_ptr&lt;sf::Texture&gt;&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2902" x2="3948" y1="1173.0703" y2="1173.0703"/><ellipse cx="2912" cy="1184.9727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="2921" y="1187.2808">SFMLModule(const std::string&amp; path)</text><ellipse cx="2912" cy="1197.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="2921" y="1200.0854">~SFMLModule()</text><ellipse cx="2912" cy="1210.582" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="2921" y="1212.8901">getAudio() : Audio&amp;</text><ellipse cx="2912" cy="1223.3867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="583" x="2921" y="1225.6948">eventHandler(const std::vector&lt;std::shared_ptr&lt;Graphic::Entity&gt;&gt;&amp; entityArray) : Graphic::Command</text><ellipse cx="2912" cy="1236.1914" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="540" x="2921" y="1238.4995">game(const std::vector&lt;std::shared_ptr&lt;Graphic::Entity&gt;&gt;&amp; entityArray) : Graphic::Command</text><ellipse cx="2912" cy="1248.9961" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="2921" y="1251.3042">getMenuDrawer() : MenuDrawer&amp;</text><ellipse cx="2912" cy="1261.8008" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="837" x="2921" y="1264.1089">Menu(const std::string&amp; name, const std::vector&lt;std::shared_ptr&lt;Players&gt;&gt; &amp;, const ClientState &amp;, sf::Clock&amp; frameClock) : MenuDrawer::State</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2909" y="1271.6055"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="672" x="2921" y="1276.9136">createRectangleShape(const sf::Vector2f&amp; size, const sf::Vector2f&amp; pos, const sf::Color&amp; color) : sf::RectangleShape</text><ellipse cx="2912" cy="1287.4102" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="2921" y="1289.7183">getPlayerName() : std::string</text><ellipse cx="2912" cy="1300.2148" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="2921" y="1302.5229">getRoomName() : std::string {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2909" y="1310.0195"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1022" x="2921" y="1315.3276">displayPlayerScene(const sf::Vector2f&amp; posConditions, const sf::Vector2f&amp; posName, const sf::RectangleShape&amp; rect, const sf::Vector2f &amp;, const std::string&amp; playerName) : void</text><ellipse cx="2912" cy="1325.8242" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="2921" y="1328.1323">displayWindow() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2909" y="1335.6289"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="2921" y="1340.937">drawEntity(std::shared_ptr&lt;Graphic::Entity&gt;) : void</text><ellipse cx="2912" cy="1351.4336" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="422" x="2921" y="1353.7417">drawGame(const std::vector&lt;std::shared_ptr&lt;Graphic::Entity&gt;&gt; &amp;) : void</text><ellipse cx="2912" cy="1364.2383" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="2921" y="1366.5464">init(const sf::Vector2f&amp; scale) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2909" y="1374.043"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="354" x="2921" y="1379.3511">loadAllSprite(std::map&lt;entityType, std::string&gt;&amp; paths) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2909" y="1386.8477"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="366" x="2921" y="1392.1558">loadSprite(const std::string&amp; path, const entityType&amp; obj) : void</text><ellipse cx="2912" cy="1402.6523" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="2921" y="1404.9604">setState(const MenuDrawer::State &amp;) : void</text><ellipse cx="2912" cy="1415.457" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="2921" y="1417.7651">stop() : void</text><!--class SignalHandler--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="99.2188" id="SignalHandler" style="stroke: #A80036; stroke-width: 1.5;" width="263" x="3984.5" y="1133"/><ellipse cx="4068.25" cy="1149" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4071.2188,1154.6406 Q4070.6406,1154.9375 4070,1155.0781 Q4069.3594,1155.2344 4068.6563,1155.2344 Q4066.1563,1155.2344 4064.8281,1153.5938 Q4063.5156,1151.9375 4063.5156,1148.8125 Q4063.5156,1145.6875 4064.8281,1144.0313 Q4066.1563,1142.375 4068.6563,1142.375 Q4069.3594,1142.375 4070,1142.5313 Q4070.6563,1142.6875 4071.2188,1142.9844 L4071.2188,1145.7031 Q4070.5938,1145.125 4070,1144.8594 Q4069.4063,1144.5781 4068.7813,1144.5781 Q4067.4375,1144.5781 4066.75,1145.6563 Q4066.0625,1146.7188 4066.0625,1148.8125 Q4066.0625,1150.9063 4066.75,1151.9844 Q4067.4375,1153.0469 4068.7813,1153.0469 Q4069.4063,1153.0469 4070,1152.7813 Q4070.5938,1152.5 4071.2188,1151.9219 L4071.2188,1154.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="87" x="4088.75" y="1153.1543">SignalHandler</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3985.5" x2="4246.5" y1="1165" y2="1165"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3985.5" x2="4246.5" y1="1173" y2="1173"/><ellipse cx="3995.5" cy="1184.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="4004.5" y="1187.2104">SignalHandler()</text><ellipse cx="3995.5" cy="1197.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="4004.5" y="1200.0151">~SignalHandler()</text><ellipse cx="3995.5" cy="1210.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="4004.5" y="1212.8198">isInterrupted() : bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3992.5" y="1220.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="237" x="4004.5" y="1225.6245">signal_callback_handler(int signum) : void</text><line style="stroke: #000000; stroke-width: 1.0;" x1="4004.5" x2="4241.5" y1="1227.6245" y2="1227.6245"/><!--class TextDrawer--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="163.2422" id="TextDrawer" style="stroke: #A80036; stroke-width: 1.5;" width="868" x="4751" y="2213.5"/><ellipse cx="5145.75" cy="2229.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5148.7188,2235.1406 Q5148.1406,2235.4375 5147.5,2235.5781 Q5146.8594,2235.7344 5146.1563,2235.7344 Q5143.6563,2235.7344 5142.3281,2234.0938 Q5141.0156,2232.4375 5141.0156,2229.3125 Q5141.0156,2226.1875 5142.3281,2224.5313 Q5143.6563,2222.875 5146.1563,2222.875 Q5146.8594,2222.875 5147.5,2223.0313 Q5148.1563,2223.1875 5148.7188,2223.4844 L5148.7188,2226.2031 Q5148.0938,2225.625 5147.5,2225.3594 Q5146.9063,2225.0781 5146.2813,2225.0781 Q5144.9375,2225.0781 5144.25,2226.1563 Q5143.5625,2227.2188 5143.5625,2229.3125 Q5143.5625,2231.4063 5144.25,2232.4844 Q5144.9375,2233.5469 5146.2813,2233.5469 Q5146.9063,2233.5469 5147.5,2233.2813 Q5148.0938,2233 5148.7188,2232.4219 L5148.7188,2235.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="70" x="5166.25" y="2233.6543">TextDrawer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4752" x2="5618" y1="2245.5" y2="2245.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4759" y="2254.4023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="4771" y="2259.7104">_font : sf::Font</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4759" y="2267.207"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="4771" y="2272.5151">_text : sf::Text</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4759" y="2280.0117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="4771" y="2285.3198">_scale : sf::Vector2f</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4752" x2="5618" y1="2291.9141" y2="2291.9141"/><ellipse cx="4762" cy="2303.8164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="4771" y="2306.1245">TextDrawer()</text><ellipse cx="4762" cy="2316.6211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="4771" y="2318.9292">~TextDrawer()</text><ellipse cx="4762" cy="2329.4258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="514" x="4771" y="2331.7339">draw(sf:: Vector2f, const std::string &amp;, sf::RenderWindow &amp;, const sf::Color&amp; color) : void</text><ellipse cx="4762" cy="2342.2305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="842" x="4771" y="2344.5386">drawPos(sf::Vector2f pos, const std::string&amp; to_print, sf::RenderWindow&amp; window, int size, const sf::Vector2f&amp; scale, const sf::Color&amp; color) : void</text><ellipse cx="4762" cy="2355.0352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="691" x="4771" y="2357.3433">drawSize(sf::Vector2f pos, const std::string&amp; to_print, sf::RenderWindow&amp; window, int size, const sf::Color&amp; color) : void</text><ellipse cx="4762" cy="2367.8398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="237" x="4771" y="2370.1479">setScale(const sf::Vector2f&amp; scale) : void</text><!--class keyTraducer--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="124.8281" id="keyTraducer" style="stroke: #A80036; stroke-width: 1.5;" width="395" x="2706.5" y="2232.5"/><ellipse cx="2861.25" cy="2248.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2864.2188,2254.1406 Q2863.6406,2254.4375 2863,2254.5781 Q2862.3594,2254.7344 2861.6563,2254.7344 Q2859.1563,2254.7344 2857.8281,2253.0938 Q2856.5156,2251.4375 2856.5156,2248.3125 Q2856.5156,2245.1875 2857.8281,2243.5313 Q2859.1563,2241.875 2861.6563,2241.875 Q2862.3594,2241.875 2863,2242.0313 Q2863.6563,2242.1875 2864.2188,2242.4844 L2864.2188,2245.2031 Q2863.5938,2244.625 2863,2244.3594 Q2862.4063,2244.0781 2861.7813,2244.0781 Q2860.4375,2244.0781 2859.75,2245.1563 Q2859.0625,2246.2188 2859.0625,2248.3125 Q2859.0625,2250.4063 2859.75,2251.4844 Q2860.4375,2252.5469 2861.7813,2252.5469 Q2862.4063,2252.5469 2863,2252.2813 Q2863.5938,2252 2864.2188,2251.4219 L2864.2188,2254.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="77" x="2881.75" y="2252.6543">keyTraducer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2707.5" x2="3100.5" y1="2264.5" y2="2264.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2714.5" y="2273.4023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="2726.5" y="2278.7104">_inputs : std::map&lt;sf::Keyboard::Key, Graphic::Command&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2714.5" y="2286.207"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="2726.5" y="2291.5151">_keys : std::map&lt;sf::Keyboard::Key, char&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2707.5" x2="3100.5" y1="2298.1094" y2="2298.1094"/><ellipse cx="2717.5" cy="2310.0117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="78" x="2726.5" y="2312.3198">keyTraducer()</text><ellipse cx="2717.5" cy="2322.8164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="2726.5" y="2325.1245">~keyTraducer()</text><ellipse cx="2717.5" cy="2335.6211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="361" x="2726.5" y="2337.9292">traduceKey(const sf::Keyboard::Key&amp; key) : Graphic::Command</text><ellipse cx="2717.5" cy="2348.4258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="369" x="2726.5" y="2350.7339">traduceLetter(const sf::Keyboard::Key&amp; key, std::string &amp;) : bool</text><!--class ClientState--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="112.0234" id="ClientState" style="stroke: #A80036; stroke-width: 1.5;" width="101" x="4147.5" y="72"/><ellipse cx="4162.5" cy="88" fill="#EB937F" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4166.6094,94 L4158.8906,94 L4158.8906,81.6094 L4166.6094,81.6094 L4166.6094,83.7656 L4161.3438,83.7656 L4161.3438,86.4375 L4166.1094,86.4375 L4166.1094,88.5938 L4161.3438,88.5938 L4161.3438,91.8438 L4166.6094,91.8438 L4166.6094,94 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="69" x="4176.5" y="92.1543">ClientState</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4148.5" x2="4247.5" y1="104" y2="104"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="43" x="4153.5" y="118.2104">INGAME</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="49" x="4153.5" y="131.0151">INLOBBY</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="32" x="4153.5" y="143.8198">NONE</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="21" x="4153.5" y="156.6245">OFF</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="36" x="4153.5" y="169.4292">READY</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4148.5" x2="4247.5" y1="176.0234" y2="176.0234"/><!--class posVector--><rect fill="#FEFECE" filter="url(#fnx2l7w2pop82)" height="73.6094" id="posVector" style="stroke: #A80036; stroke-width: 1.5;" width="96" x="3137" y="2258"/><ellipse cx="3152" cy="2274" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3154.9688,2279.6406 Q3154.3906,2279.9375 3153.75,2280.0781 Q3153.1094,2280.2344 3152.4063,2280.2344 Q3149.9063,2280.2344 3148.5781,2278.5938 Q3147.2656,2276.9375 3147.2656,2273.8125 Q3147.2656,2270.6875 3148.5781,2269.0313 Q3149.9063,2267.375 3152.4063,2267.375 Q3153.1094,2267.375 3153.75,2267.5313 Q3154.4063,2267.6875 3154.9688,2267.9844 L3154.9688,2270.7031 Q3154.3438,2270.125 3153.75,2269.8594 Q3153.1563,2269.5781 3152.5313,2269.5781 Q3151.1875,2269.5781 3150.5,2270.6563 Q3149.8125,2271.7188 3149.8125,2273.8125 Q3149.8125,2275.9063 3150.5,2276.9844 Q3151.1875,2278.0469 3152.5313,2278.0469 Q3153.1563,2278.0469 3153.75,2277.7813 Q3154.3438,2277.5 3154.9688,2276.9219 L3154.9688,2279.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="3166" y="2278.1543">posVector</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3138" x2="3232" y1="2290" y2="2290"/><ellipse cx="3148" cy="2301.9023" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="43" x="3157" y="2304.2104">x : float</text><ellipse cx="3148" cy="2314.707" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="43" x="3157" y="2317.0151">y : float</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3138" x2="3232" y1="2323.6094" y2="2323.6094"/><!--link INetwork to Client--><path d="M3425,211.0367 C3425,239.3471 3425,272.7955 3425,307.9505 " fill="none" id="INetwork-Client" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="3418.0001,210.9143,3425,190.9143,3432.0001,210.9142,3418.0001,210.9143" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Client to BinaryProtocol.Codec--><path d="M3844.5196,657.5643 C4081.1982,707.3652 4374.375,793.8951 4603,941 C4669.4467,983.754 4726.678,1053.7393 4764.3647,1107.3925 " fill="none" id="Client-BinaryProtocol.Codec" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="3831.5139,654.8526,3836.5711,659.9931,3843.2612,657.3021,3838.2041,652.1615,3831.5139,654.8526" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Client to Graphic.Entity--><path d="M3005.2398,621.3465 C2341.1441,668.1374 1080.8656,775.7044 665,941 C610.4065,962.6995 556.6266,995.6038 508.8386,1030.202 " fill="none" id="Client-Graphic.Entity" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="3018.3805,620.4231,3012.1148,616.8536,3006.41,621.2644,3012.6757,624.8339,3018.3805,620.4231" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Client to Players--><path d="M3007.6185,835.4543 C2963.7595,868.3357 2921.547,903.7072 2884,941 C2832.9073,991.7468 2789.6181,1061.8155 2761.5195,1113.4125 " fill="none" id="Client-Players" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="3018.197,827.5944,3010.9953,827.962,3008.5647,834.7511,3015.7664,834.3835,3018.197,827.5944" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Client to SFMLModule--><path d="M3425,894.2991 C3425,909.9163 3425,925.5117 3425,940.9089 " fill="none" id="Client-SFMLModule" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="3425,881.1794,3421,887.1794,3425,893.1794,3429,887.1794,3425,881.1794" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Client to SignalHandler--><path d="M3842.4432,833.3004 C3886.7982,866.692 3929.3787,902.7716 3967,941 C4023.3258,998.2346 4068.3304,1080.4912 4093.5956,1132.7024 " fill="none" id="Client-SignalHandler" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="3831.743,825.3216,3834.1618,832.1149,3841.3629,832.495,3838.9441,825.7016,3831.743,825.3216" style="stroke: #A80036; stroke-width: 1.0;"/><!--link MenuDrawer to Audio--><path d="M3686.9874,2141.9155 C3643.9429,2172.9996 3604.0629,2201.7986 3570.7777,2225.8351 " fill="none" id="MenuDrawer-Audio" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="3697.6974,2134.1814,3690.4913,2134.4512,3687.9689,2141.2068,3695.1749,2140.9369,3697.6974,2134.1814" style="stroke: #A80036; stroke-width: 1.0;"/><!--link MenuDrawer to GifDrawer--><path d="M4050.6819,2146.8327 C4045.9639,2163.211 4041.4422,2178.9076 4037.2239,2193.5513 " fill="none" id="MenuDrawer-GifDrawer" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="4054.3264,2134.1814,4048.8218,2138.8397,4051.0047,2145.7125,4056.5092,2141.0542,4054.3264,2134.1814" style="stroke: #A80036; stroke-width: 1.0;"/><!--link MenuDrawer to ParallaxShader--><path d="M4408.2721,2144.5232 C4425.5926,2166.8514 4441.9627,2187.9545 4456.6611,2206.9027 " fill="none" id="MenuDrawer-ParallaxShader" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="4400.2498,2134.1814,4400.7668,2141.3739,4407.6049,2143.6631,4407.0879,2136.4706,4400.2498,2134.1814" style="stroke: #A80036; stroke-width: 1.0;"/><!--link MenuDrawer to TextDrawer--><path d="M4830.1965,2128.7179 C4896.0229,2159.5681 4957.9268,2188.58 5011.0254,2213.4652 " fill="none" id="MenuDrawer-TextDrawer" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="4818.2982,2123.1417,4822.0336,2129.3099,4829.1641,2128.2341,4825.4286,2122.066,4818.2982,2123.1417" style="stroke: #A80036; stroke-width: 1.0;"/><!--link MenuDrawer to keyTraducer--><path d="M3465.409,2108.5172 C3440.0796,2117.445 3414.8865,2125.9771 3390,2134 C3273.0022,2171.7177 3236.3727,2154.3957 3120,2194 C3088.7462,2204.6364 3056.0028,2218.4476 3025.7311,2232.4232 " fill="none" id="MenuDrawer-keyTraducer" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="3477.8537,2104.1032,3470.8617,2102.3391,3466.5441,2108.1148,3473.5361,2109.8789,3477.8537,2104.1032" style="stroke: #A80036; stroke-width: 1.0;"/><!--link MenuDrawer to posVector--><path d="M3465.8596,2101.5439 C3342.1974,2154.6261 3251.4125,2193.6535 3251,2194 C3230.3107,2211.3808 3213.7135,2236.8911 3202.3378,2257.9245 " fill="none" id="MenuDrawer-posVector" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="3477.9276,2096.3639,3470.8363,2095.0549,3466.9006,2101.0973,3473.9919,2102.4063,3477.9276,2096.3639" style="stroke: #A80036; stroke-width: 1.0;"/><!--link SFMLModule to Audio--><path d="M3431.2548,1437.2377 C3436.7834,1628.9525 3446.2912,1898.1238 3461,2134 C3462.8772,2164.1027 3465.6465,2197.3136 3468.2277,2225.7143 " fill="none" id="SFMLModule-Audio" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="3430.88,1424.1466,3427.0534,1430.2586,3431.2235,1436.1417,3435.0501,1430.0296,3430.88,1424.1466" style="stroke: #A80036; stroke-width: 1.0;"/><!--link SFMLModule to MenuDrawer--><path d="M3713.6114,1432.59 C3733.11,1449.4861 3752.9038,1466.638 3772.753,1483.8378 " fill="none" id="SFMLModule-MenuDrawer" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="3703.755,1424.0491,3705.67,1431.0013,3712.8239,1431.9075,3710.9089,1424.9553,3703.755,1424.0491" style="stroke: #A80036; stroke-width: 1.0;"/><!--link SFMLModule to ParallaxShader--><path d="M3962.0411,1422.7519 C3963.6953,1423.1726 3965.3483,1423.5887 3967,1424 C4060.9174,1447.3868 4769.9614,1413.2446 4836,1484 C5033.1144,1695.1935 4986.1481,1887.1957 4836,2134 C4831.5563,2141.3043 4770.9581,2173.281 4704.4182,2206.8348 " fill="none" id="SFMLModule-ParallaxShader" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="3949.3377,1419.4361,3954.1329,1424.8218,3960.9487,1422.4668,3956.1534,1417.0811,3949.3377,1419.4361" style="stroke: #A80036; stroke-width: 1.0;"/><!--link SFMLModule to Parser--><path d="M3333.7468,1436.5895 C3294.2702,1546.5099 3251.1714,1666.516 3224.8595,1739.7801 " fill="none" id="SFMLModule-Parser" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="3338.1701,1424.2731,3332.3775,1428.568,3334.1141,1435.5668,3339.9067,1431.272,3338.1701,1424.2731" style="stroke: #A80036; stroke-width: 1.0;"/><!--link SFMLModule to TextDrawer--><path d="M3962.0372,1422.7679 C3963.6926,1423.1833 3965.3469,1423.5941 3967,1424 C4070.7914,1449.4866 4842.7408,1418.2534 4927,1484 C5156.0408,1662.7183 5185.4454,2045.3315 5186.7644,2213.1994 " fill="none" id="SFMLModule-TextDrawer" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="3949.3241,1419.4909,3954.1357,1424.862,3960.9442,1422.4863,3956.1326,1417.1152,3949.3241,1419.4909" style="stroke: #A80036; stroke-width: 1.0;"/><!--link SFMLModule to keyTraducer--><path d="M2984.595,1434.421 C2971.8242,1450.1216 2960.1933,1466.6403 2950,1484 C2806.5603,1728.2842 2859.9033,2088.5402 2889.5272,2232.3626 " fill="none" id="SFMLModule-keyTraducer" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="2993.1482,1424.221,2986.228,1426.2484,2985.4377,1433.416,2992.358,1431.3887,2993.1482,1424.221" style="stroke: #A80036; stroke-width: 1.0;"/><!--link SFMLModule to posVector--><path d="M3041.3019,1434.8 C3029.9277,1450.4579 3019.7228,1466.8567 3011,1484 C2945.4959,1612.7378 2937.7482,2009.5075 3011,2134 C3038.8464,2181.3254 3078.8059,2156.5895 3119,2194 C3138.4728,2212.1242 3154.8681,2237.1228 3166.447,2257.7146 " fill="none" id="SFMLModule-posVector" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="3049.3593,1424.0782,3042.557,1426.4716,3042.15,1433.6712,3048.9524,1431.2778,3049.3593,1424.0782" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Graphic.Alien to Graphic.AlienShoot--><!--link Graphic.AlienShoot to Graphic.Background--><!--link Graphic.Background to Graphic.IEntity--><!--link Graphic.Alien to Graphic.IGraphicLibrary--><!--link Graphic.IGraphicLibrary to Graphic.Obstacle--><!--link Graphic.Obstacle to Graphic.Pirate--><!--link Graphic.Pirate to Graphic.PirateShoot--><!--link Graphic.IGraphicLibrary to Graphic.Player--><!--link Graphic.Player to Graphic.PlayerShoot--><!--link Graphic.PlayerShoot to Graphic.Spaceship--><!--link Graphic.Spaceship to Graphic.SpaceshipShoot--><!--link Graphic.Player to Graphic.Ufo--><!--link Graphic.Ufo to Graphic.UfoShoot--><!--link Graphic.UfoShoot to Graphic.Wall--><!--link Graphic.Wall to Graphic.Command--><!--
@startuml






namespace Graphic {
	class Alien {
		+Alien(int id, bool bonus, const sf::Vector2f& test, const animationState& anime)
		+~Alien()
		+getType() : entityType {query}
	}
}


namespace Graphic {
	class AlienShoot {
		+AlienShoot(int id, bool bonus, const sf::Vector2f& test, const animationState& anime)
		+~AlienShoot()
		+getType() : entityType {query}
	}
}


class Animation {
	+Animation(const sf::Time& frameTime)
	+~Animation()
	-_currentState : StateAnim
	-_error : int
	-getCurrentFrame(StateAnim &) : int
	+getState() : int {query}
	+getFrame(StateAnim &) : sf::IntRect
	+update(sf::Time deltaTime, StateAnim state) : sf::IntRect
	-_currentTime : sf::Time
	-_frameTime : sf::Time
	-_frames : std::map<StateAnim, std::pair<int, std::vector<sf::IntRect>>>
	-getFrames(StateAnim state) : std::vector<sf::IntRect>
	+addFrame(StateAnim &, const sf::IntRect &) : void
	-setFramePos(int pos, StateAnim state) : void
	+setState(StateAnim &) : void
}


class Audio {
	+Audio()
	+~Audio()
	-_sounds : std::map<audioType, sf::Sound>
	-_soundBuffer : std::vector<std::shared_ptr<sf::SoundBuffer>>
	+addSound(const std::string& path, bool loop, audioType type) : void
	+playSound(audioType type) : void
	+stopSound(audioType type) : void
}


namespace Graphic {
	class Background {
		+Background(int id, bool bonus, const sf::Vector2f& test, const animationState& anime)
		+~Background()
		+getType() : entityType {query}
	}
}


class Client {
	+Client(const std::string& ip, unsigned short port, const std::string& configFile)
	+Client(const Client& other)
	+~Client()
	-_binCodec : BinaryProtocol::Codec
	+operator=(const Client& other) : Client&
	-_state : ClientState
	-_sfmlModule : SFMLModule
	-_sigHandler : SignalHandler
	-_recvBuff : boost::array<uint8_t, 1024>
	-_ioService : boost::asio::io_service
	-_remoteEndpoint : boost::asio::ip::udp::endpoint
	-_clientSocket : boost::asio::ip::udp::socket
	-_thread : boost::thread
	-checkGameState(const Graphic::Command& com) : int
	-checkMenuState(const MenuDrawer::State& state) : int
	-_serverResponse : std::map<int, hsmFunction>
	-_clientName : std::string
	-_entities : std::vector<std::shared_ptr<Graphic::Entity>>
	-_players : std::vector<std::shared_ptr<Players>>
	-changeState() : void
	-createEntity(int entityId, const entityType& entityType, bool bonus, const sf::Vector2f& entityPos, const animationState& animation) : void
	-destroyEntity(int entityId) : void
	-handleBusy(std::string& update) : void
	-handleFine(std::string& update) : void
	-handleFullRoom(std::string& update) : void
	-handleGhostRoom(std::string& update) : void
	-handleInvalidCommand(std::string& update) : void
	-handleJoinLobby(std::string& update) : void
	-handleReceive(const boost::system::error_code &, std::size_t) : void
	-handleServerMessage(std::string& update) : void
	-handleStartGame(std::string& update) : void
	-handleTooFast(std::string& update) : void
	-handleUpdateGame(std::string& update) : void
	-handleUpdateMenu(std::string& update) : void
	-loop() : void
	-send(const std::string& str) : void
	-setState(const ClientState &) : void
	+start() : void
	-startReceive() : void
	+stop() : void
	-updateEntity(int entityId, const sf::Vector2f& entityPos, const animationState &) : void {query}
}


namespace BinaryProtocol {
	class Codec {
		+Codec()
		+Codec(const Codec& other)
		+~Codec()
		+operator=(const Codec& other) : Codec&
		+createPacket(const std::string& message) : Packet
		+unserialize(const boost::array<uint8_t, 1024>& input) : Packet
		+check_packet(const Packet& toCheck) : bool
		+serialize(const Packet& input) : std::vector<uint8_t>
	}
}


namespace Graphic {
	class Entity {
		+Entity(int id, const entityType& type, bool bonus, const sf::Vector2f& pos, const animationState& anime)
		+Entity(const Entity& other)
		+~Entity()
		+operator=(const Entity& other) : Entity&
		#_currentAnimation : animationState
		+getCurrentAnimation() : animationState {query}
		#_bonus : bool
		#_type : entityType
		+getType() : entityType {query}
		#_id : int
		+getId() : int {query}
		+getRectAnime(const animationState &) : sf::IntRect
		#_pos : sf::Vector2f
		#_scale : sf::Vector2f
		+getPos() : sf::Vector2f {query}
		#_animation : std::map<animationState, sf::IntRect>
		+setAnimation(const animationState& anime) : void
		+setscale(const sf::Vector2f& scale) : void
		+update(const sf::Vector2f& pos) : void
		+update(int x, int y) : void
	}
}


class GifDrawer {
	+GifDrawer(int nb, const std::string& path, const sf::Vector2f& scale, const sf::Time& frameTime)
	+~GifDrawer()
	-_index : int
	-_currentTime : sf::Time
	-_frameTime : sf::Time
	-_scale : sf::Vector2f
	-_path : std::string
	-_sprites : std::vector<sf::Sprite>
	-_textures : std::vector<std::shared_ptr<sf::Texture>>
	-loadSprite(const std::string& path) : void
	+setScale(const sf::Vector2f& scale) : void
	+update(sf::Time deltaTime, sf::RenderWindow& window) : void
}


namespace Graphic {
	abstract class IEntity {
		+~IEntity()
		+{abstract} getType() : entityType {query}
		+{abstract} update(const sf::Vector2f& pos) : void
		+{abstract} update(int x, int y) : void
	}
}


namespace Graphic {
	abstract class IGraphicLibrary {
		+~IGraphicLibrary()
		+{abstract} eventHandler(const std::vector<std::shared_ptr<Graphic::Entity>>& entityArray) : int
		+{abstract} getPlayerName() : std::string
		+{abstract} displayWindow() : void
		+{abstract} drawGame(const std::vector<std::shared_ptr<Graphic::Entity>> &) : void
		+{abstract} init(const sf::Vector2f& scale) : void
		+{abstract} stop() : void
	}
}


abstract class INetwork {
	+~INetwork()
	-{abstract} handleReceive(const boost::system::error_code &, std::size_t) : void
	-{abstract} send(const std::string &) : void
	+{abstract} start() : void
	-{abstract} startReceive() : void
	+{abstract} stop() : void
}


class MenuDrawer {
	+MenuDrawer(const sf::Vector2f& scale)
	+~MenuDrawer()
	-_audio : Audio
	+getAudio() : Audio&
	-_gifDrawer : GifDrawer
	-_parallaxShader : ParallaxShader
	-_state : State
	-_text : TextDrawer
	-checkHome(State &) : bool
	-checkRoom(State state) : bool
	-checkSettings(State state) : bool
	-checkView(State state) : bool
	-clickButton(sf::RenderWindow& window, sf::Event& event) : int
	+getState() : int {query}
	+handleMenu(sf::RenderWindow& window, sf::Event& event) : int
	-_key : keyTraducer
	-_winpos : posVector
	-createRectangleShape(const sf::Vector2f& size, const sf::Vector2f& pos, const sf::Color& color) : sf::RectangleShape
	-_background : sf::Sprite
	-_back : sf::Texture
	-_scale : sf::Vector2f
	-getPosButton(State obj) : sf::Vector2f
	-_buttons : std::map<State, sf::Sprite>
	-_posButtons : std::map<State, sf::Vector2f>
	-_players : std::map<entityType, sf::Sprite>
	-_roomName : std::string
	-enterScene(sf::RenderWindow& window, sf::Event& event, State state) : std::string
	-getPlayerName(const entityType& type) : std::string
	+getRoomName() : std::string {query}
	-_textures : std::vector<std::shared_ptr<sf::Texture>>
	-displayJoinScene(const sf::Vector2f& posConditions, const sf::Vector2f& posName, const sf::RectangleShape& rect, const sf::Vector2f& posEnter, const std::string& port, sf::RenderWindow& window, const sf::Sprite& back) : void
	+draw(sf::RenderWindow& window, const std::string& playerName, sf::Event& event, const std::vector<std::shared_ptr<Players>>& players, const ClientState& clientS, sf::Time& frameTime) : void
	-drawButton(State state, const sf::Vector2f& pos, sf::RenderWindow& window) : void
	-drawHome(sf::RenderWindow& window, const std::string& playerName) : void
	-drawIconStat(State state, sf::RenderWindow& window, sf::Vector2f pos) : void
	-drawPlayerRoom(const std::shared_ptr<Players>& player, sf::RenderWindow& window) : void
	-drawRect(const sf::Vector2f &, sf::RenderWindow& window) : void
	-drawRoom(sf::RenderWindow& window, const std::string& playerName, sf::Event& event, const std::vector<std::shared_ptr<Players>>& players, const ClientState& clientS, sf::Time& frameTime) : void
	-drawSettings(sf::RenderWindow& window) : void
	-drawState(State state, sf::RenderWindow& window, const sf::Vector2f& pos) : void
	-initPosButton() : void
	-loadSprite(const std::string& path, State obj, sf:: IntRect, const posVector& scale) : void
	-loadSpriteSize(const std::string& path, const entityType& obj, sf:: IntRect, const posVector& scale) : void
	+reSize() : void
	-setButton() : void
	+setScale(const sf::Vector2f &) : void
	+setState(State &) : void
}


namespace Graphic {
	class Obstacle {
		+Obstacle(int id, bool bonus, const sf::Vector2f& test, const animationState& anime)
		+~Obstacle()
		+getType() : entityType {query}
	}
}


class ParallaxShader {
	+ParallaxShader(const std::string &, const sf::Vector2f& scale)
	+~ParallaxShader()
	-_offset : float
	-_clock : sf::Clock
	-_parallaxShader : sf::Shader
	-_sprite : sf::Sprite
	-_texture : sf::Texture
	-_scale : sf::Vector2f
	+parallaxShaderDraw(sf::RenderWindow& window) : void
	+setScale(const sf::Vector2f &) : void
}


class Parser {
	+Parser(std::string configFilePath)
	+~Parser()
	+linkEntitiesToSprites() : bool
	+openFile(std::string configFilePath) : bool
	#_config : std::ifstream
	+getPaths() : std::map<entityType , std::string> {query}
	#_paths : std::map<entityType, std::string>
}


namespace Graphic {
	class Pirate {
		+Pirate(int id, bool bonus, const sf::Vector2f& test, const animationState& anime)
		+~Pirate()
		+getType() : entityType {query}
	}
}


namespace Graphic {
	class PirateShoot {
		+PirateShoot(int id, bool bonus, const sf::Vector2f& test, const animationState& anime)
		+~PirateShoot()
		+getType() : entityType {query}
	}
}


namespace Graphic {
	class Player {
		+Player(int id, const entityType& type, bool bonus, const sf::Vector2f& test, const animationState& anime)
		+~Player()
		+getType() : entityType {query}
	}
}


namespace Graphic {
	class PlayerShoot {
		+PlayerShoot(int id, bool bonus, const sf::Vector2f& test, const animationState& anime)
		+~PlayerShoot()
		+getType() : entityType {query}
	}
}


class Players {
	+Players(const entityType& type, State state)
	+~Players()
	-_state : State
	-_type : entityType
	+getType() : entityType {query}
	+getState() : int {query}
	+setState(State &) : void
}


class SFMLModule {
	+SFMLModule(const std::string& path)
	+~SFMLModule()
	-_audio : Audio
	+getAudio() : Audio&
	+eventHandler(const std::vector<std::shared_ptr<Graphic::Entity>>& entityArray) : Graphic::Command
	+game(const std::vector<std::shared_ptr<Graphic::Entity>>& entityArray) : Graphic::Command
	-_menu : MenuDrawer
	+getMenuDrawer() : MenuDrawer&
	+Menu(const std::string& name, const std::vector<std::shared_ptr<Players>> &, const ClientState &, sf::Clock& frameClock) : MenuDrawer::State
	-_parallaxShader : ParallaxShader
	-_parser : Parser
	-_scene : Scene
	-_text : TextDrawer
	-_key : keyTraducer
	-_winpos : posVector
	-_event : sf::Event
	-createRectangleShape(const sf::Vector2f& size, const sf::Vector2f& pos, const sf::Color& color) : sf::RectangleShape
	-_window : sf::RenderWindow
	-_background : sf::Sprite
	-_scale : sf::Vector2f
	-_sprites : std::map<entityType, sf::Sprite>
	-_roomName : std::string
	+getPlayerName() : std::string
	+getRoomName() : std::string {query}
	-_textures : std::vector<std::shared_ptr<sf::Texture>>
	-displayPlayerScene(const sf::Vector2f& posConditions, const sf::Vector2f& posName, const sf::RectangleShape& rect, const sf::Vector2f &, const std::string& playerName) : void
	+displayWindow() : void
	-drawEntity(std::shared_ptr<Graphic::Entity>) : void
	+drawGame(const std::vector<std::shared_ptr<Graphic::Entity>> &) : void
	+init(const sf::Vector2f& scale) : void
	-loadAllSprite(std::map<entityType, std::string>& paths) : void
	-loadSprite(const std::string& path, const entityType& obj) : void
	+setState(const MenuDrawer::State &) : void
	+stop() : void
}


class SignalHandler {
	+SignalHandler()
	+~SignalHandler()
	+isInterrupted() : bool
	-{static} signal_callback_handler(int signum) : void
}


namespace Graphic {
	class Spaceship {
		+Spaceship(int id, bool bonus, const sf::Vector2f& test, const animationState& anime)
		+~Spaceship()
		+getType() : entityType {query}
	}
}


namespace Graphic {
	class SpaceshipShoot {
		+SpaceshipShoot(int id, bool bonus, const sf::Vector2f& test, const animationState& anime)
		+~SpaceshipShoot()
		+getType() : entityType {query}
	}
}


class TextDrawer {
	+TextDrawer()
	+~TextDrawer()
	-_font : sf::Font
	-_text : sf::Text
	-_scale : sf::Vector2f
	+draw(sf:: Vector2f, const std::string &, sf::RenderWindow &, const sf::Color& color) : void
	+drawPos(sf::Vector2f pos, const std::string& to_print, sf::RenderWindow& window, int size, const sf::Vector2f& scale, const sf::Color& color) : void
	+drawSize(sf::Vector2f pos, const std::string& to_print, sf::RenderWindow& window, int size, const sf::Color& color) : void
	+setScale(const sf::Vector2f& scale) : void
}


namespace Graphic {
	class Ufo {
		+Ufo(int id, bool bonus, const sf::Vector2f& test, const animationState& anime)
		+~Ufo()
		+getType() : entityType {query}
	}
}


namespace Graphic {
	class UfoShoot {
		+UfoShoot(int id, bool bonus, const sf::Vector2f& test, const animationState& anime)
		+~UfoShoot()
		+getType() : entityType {query}
	}
}


namespace Graphic {
	class Wall {
		+Wall(int id, bool bonus, const sf::Vector2f& test, const animationState& anime)
		+~Wall()
		+getType() : entityType {query}
	}
}


class keyTraducer {
	+keyTraducer()
	+~keyTraducer()
	+traduceKey(const sf::Keyboard::Key& key) : Graphic::Command
	+traduceLetter(const sf::Keyboard::Key& key, std::string &) : bool
	-_inputs : std::map<sf::Keyboard::Key, Graphic::Command>
	-_keys : std::map<sf::Keyboard::Key, char>
}


enum ClientState {
	INGAME
	INLOBBY
	NONE
	OFF
	READY
}


namespace Graphic {
	enum Command {
		DOWN
		EXIT
		LEFT
		NOTHING
		RIGHT
		SHOOT
		UP
	}
}


namespace BinaryProtocol {
	class Packet {
		+operator==(const Packet& other) : bool {query}
		+_message : std::string
		+_magicNumber : uint32_t
	}
}


class posVector {
	+x : float
	+y : float
}






.INetwork <|- - .Client






.Client *- - BinaryProtocol.Codec


.Client *- - Graphic.Entity


.Client *- - .Players


.Client *- - .SFMLModule


.Client *- - .SignalHandler


.MenuDrawer *- - .Audio


.MenuDrawer *- - .GifDrawer


.MenuDrawer *- - .ParallaxShader


.MenuDrawer *- - .TextDrawer


.MenuDrawer *- - .keyTraducer


.MenuDrawer *- - .posVector


.SFMLModule *- - .Audio


.SFMLModule *- - .MenuDrawer


.SFMLModule *- - .ParallaxShader


.SFMLModule *- - .Parser


.SFMLModule *- - .TextDrawer


.SFMLModule *- - .keyTraducer


.SFMLModule *- - .posVector





@enduml

PlantUML version 1.2019.01(Sat Feb 09 16:32:04 CET 2019)
(LGPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 1.8.0_252-b09
Operating System: Linux
OS Version: 5.6.13-100.fc30.x86_64
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>